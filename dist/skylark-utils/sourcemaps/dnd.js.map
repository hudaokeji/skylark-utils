{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","noder","datax","finder","geom","eventer","styler","on","off","attr","removeAttr","pagePosition","addClass","height","manager","Evented","inherit","klassName","init","prepare","draggable","e","create","dragSource","dragHandle","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","elm","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","removeClass","Draggable","params","self","clone","forEach","eventName","isFunction","mousedown","handle","closest","target","source","mouseup","dragstart","dragend","stop","Droppable","hoverClass","activeClass","acceptable","_params","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","dnd","mixin","droppable"],"mappings":"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","file":"../dnd.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n        klassName: \"Draggable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this;\r\n\r\n            self.elm = elm;\r\n            self.draggingClass = params.draggingClass || \"dragging\",\r\n                self.params = langx.clone(params);\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var params = self.params;\r\n                    if (params.handle) {\r\n                        self.dragHandle = finder.closest(e.target, params.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (params.source) {\r\n                        self.dragSource = finder.closest(e.target, params.source);\r\n                    } else {\r\n                        self.dragSource = self.elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this,\r\n                draggingClass = params.draggingClass || \"dragging\",\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            self.elm = elm;\r\n            self._params = params;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n\r\n    /*   \r\n     * Make the specified element be in a moveable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function draggable(elm, params) {\r\n        return new Draggable(elm, params);\r\n    }\r\n\r\n    /*   \r\n     * Make the specified element be in a droppable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function droppable(elm, params) {\r\n        return new Droppable(elm, params);\r\n    }\r\n\r\n\r\n    function dnd() {\r\n        return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n        //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable: draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable: droppable,\r\n\r\n        manager: manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});"]}