{"version":3,"sources":["models.js"],"names":["define","skylark","langx","methodMap","create","update","patch","delete","read","Entity","Stateful","inherit","sync","models","apply","this","arguments","matches","attrs","isMatch","attributes","fetch","options","entity","success","mixin","parse","resp","serverAttrs","set","call","context","trigger","wrapError","save","key","val","wait","validate","_validate","method","isNew","xhr","destroy","clone","stopListening","collection","defer","url","base","result","urlError","id","get","idAttribute","replace","encodeURIComponent","Collection","Evented","init","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","length","i","tail","Array","partial","initialize","toJSON","map","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","push","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","pop","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","Error","isFunction","proxy","sortBy","pluck","attr","callbackOpts","constructor","prototype","validationError","indexOf","on","_onEntityEvent","off","event","prevId","previousAttributes","emulateHTTP","emulateJSON","type","defaults","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","error","textStatus","errorThrown","Xhr","request"],"mappings":"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","file":"../models.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark,langx) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"init\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return skylark.models = models;\r\n});\r\n"]}