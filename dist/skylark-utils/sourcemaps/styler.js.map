{"version":3,"sources":["styler.js"],"names":["define","skylark","langx","Array","prototype","every","forEach","camelCase","dasherize","maybeAddPx","name","value","cssNumber","column-count","columns","font-weight","line-height","opacity","z-index","zoom","classReCache","classRE","RegExp","className","node","klass","svg","undefined","baseVal","elementDisplay","styler","mixin","autocssfix","cssHooks","addClass","elm","this","cls","isString","split","re","match","css","property","arguments","length","computedStyle","getComputedStyle","style","getPropertyValue","isArrayLike","props","call","prop","removeProperty","key","cssText","disabled","dom","hasClass","hide","isInvisible","removeClass","replace","trim","show","nodeName","element","display","document","createElement","body","appendChild","parentNode","removeChild","toggleClass","when","self"],"mappings":"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","file":"../styler.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getComputedStyle(elm, '')\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.styler = styler;\r\n});"]}