{"version":3,"sources":["touchx.js"],"names":["define","DataTransfer","this","_dropEffect","_effectAllowed","_data","Object","defineProperty","prototype","get","set","value","enumerable","configurable","keys","clearData","type","getData","setData","setDragImage","img","offsetX","offsetY","ddt","DragDropTouch","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","document","addEventListener","passive","d","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","e","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","target","preventDefault","_reset","src","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_getTarget","_getDelta","_THRESHOLD","_createImage","_lastTarget","_moveImage","_destroyImage","indexOf","defaultPrevented","touches","length","_dataTransfer","page","pageX","clientX","pageY","clientY","p","Math","abs","pt","el","elementFromPoint","getComputedStyle","pointerEvents","parentElement","cloneNode","_copyStyle","style","top","left","rc","getBoundingClientRect","opacity","_OPACITY","toString","body","appendChild","removeChild","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","props","i","_rmvAtts","forEach","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","height","getContext","drawImage","cs","key","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dataTransfer","dispatchEvent","hasAttribute","draggable","split"],"mappings":"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","file":"../touchx.js","sourcesContent":["define([], function() {\r\n\r\n    //The following code is borrow from DragDropTouch (https://github.com/Bernardo-Castilho/dragdroptouch)\r\n\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function() {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function() {\r\n                return this._dropEffect;\r\n            },\r\n            set: function(value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function() {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function(value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function() {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function(type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            } else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function(type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function(type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function(img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function() {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', null, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if ('ontouchstart' in document) {\r\n                var d = document,\r\n                    ts = this._touchstart.bind(this),\r\n                    tm = this._touchmove.bind(this),\r\n                    te = this._touchend.bind(this),\r\n                    opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function() {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function(e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function() {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img) {\r\n                    var delta = this._getDelta(e);\r\n                    if (delta > DragDropTouch._THRESHOLD) {\r\n                        this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                        this._createImage(e);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                    }\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function(e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function() {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._dataTransfer = new DataTransfer();\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function(e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function(e) {\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function(e) {\r\n            var pt = this._getPoint(e),\r\n                el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function(e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(),\r\n                    pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function() {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function(e) {\r\n            var _this = this;\r\n            if (this._img) {\r\n                requestAnimationFrame(function() {\r\n                    var pt = _this._getPoint(e, true),\r\n                        s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                });\r\n            }\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function(dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function(src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function(att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src,\r\n                    cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function(e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'),\r\n                    t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function(e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n\r\n    /*private*/\r\n    DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\r\n\r\n    return DragDropTouch;\r\n});\r\n"]}