{"version":3,"sources":["skylark-utils.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","browser","css","datax","langx","noder","finder","geom","eventer","maybeAddPx","name","value","cssNumber","dasherize","classRE","classReCache","RegExp","className","node","klass","svg","undefined","baseVal","disabled","elm","arguments","this","dom","defaultDisplay","nodeName","element","display","elementDisplay","document","createElement","body","appendChild","getComputedStyle","getPropertyValue","parentNode","removeChild","show","styler","isInvisible","hide","addClass","names","cls","isString","re","match","property","computedStyle","style","camelCase","isArrayLike","props","call","prop","removeProperty","key","cssText","hasClass","removeClass","replace","trim","toggleClass","when","self","Array","prototype","every","column-count","columns","font-weight","line-height","opacity","z-index","zoom","mixin","autocssfix","cssHooks","draggable","params","Draggable","droppable","Droppable","dnd","DndManager","on","off","attr","removeAttr","pagePosition","height","Evented","inherit","klassName","init","prepare","e","create","dragSource","dragHandle","trigger","start","event","p","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","manager","clone","eventName","isFunction","mousedown","handle","closest","target","source","mouseup","dragstart","dragend","stop","hoverClass","activeClass","acceptable","_params","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","usermedia","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Deferred","localStream","isSupported","video","audio","d","stream","src","URL","createObjectURL","localMediaStream","onloadedmetadata","resolve","err","reject","promise","vibrate","webkitVibrate","mozVibrate","msVibrate","duration","devices","dropzone","droppedCallback","enterdCount","types","indexOf","items","webkitGetAsEntry","getAsEntry","webentry","all","item","then","files","pastezone","pastedCallback","pasted","originalEvent","clipboardData","index","file","getAsFile","picker","select","selectFiles","pickedFiles","size","maxFileSize","splice","fileSelected","directory","multiple","picked","fileInput","input","type","position","onchange","entries","webkitEntries","slice","webkitdirectory","click","upload","initDataSettings","o","chunkedUpload","data","initXHRData","formData","multipart","paramName","headers","contentRange","FormData","blob","append","uploadName","encodeURI","contentType","getUploadedBytes","jqXHR","range","getResponseHeader","upperBytesPos","BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","options","testOnly","uploadedBytes","fs","ub","mcs","maxChunkSize","blobSlice","dfd","error","i18n","_getXHRPromise","context","currentLoaded","_progress","chunkSize","$","ajax","done","result","textStatus","progress","lengthComputable","total","resolveWith","fail","errorThrown","rejectWith","abort","xoptions","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","recalculateProgress","progressInterval","bitrateInterval","autoUpload","messages","message","toString","form","serializeArray","add","isDefaultPrevented","fileupload","process","submit","processData","cache","Blob","webkitSlice","mozSlice","Xhr","request","url","_bitrateTimer","jqXhr","concat","one","entry","path","onError","isFile","relativePath","isDirectory","dirReader","createReader","readEntries","filer","readFile","reader","FileReader","onload","evt","onerror","code","alert","asArrayBuffer","readAsArrayBuffer","asDataUrl","readAsDataURL","asText","readAsText","writeFile","msSaveBlob","dataURItoBlob","a","href","setAttribute","dispatchEvent","CustomEvent","fx","images","models","methodMap","update","patch","delete","read","sync","method","entity","defaults","emulateHTTP","emulateJSON","dataType","urlError","JSON","stringify","attrs","toJSON","_method","beforeSend","xhr","setRequestHeader","Entity","Stateful","matches","isMatch","attributes","fetch","parse","success","resp","serverAttrs","set","wrapError","save","val","validate","wait","_validate","isNew","destroy","stopListening","collection","defer","get","idAttribute","encodeURIComponent","Collection","entities","comparator","_reset","reset","silent","setOptions","remove","merge","addOptions","array","insert","at","Math","min","max","tail","partial","initialize","singular","isArray","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","_removeReference","previousEntitys","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","proxy","sortBy","pluck","callbackOpts","constructor","validationError","_onEntityEvent","prevId","previousAttributes","query","scripter","cookies","sKey","unescape","cookie","escape","test","list","expires","domain","secure","sExpires","Number","vEnd","Infinity","String","toGMTString","errorHandler","msg","FileError","QUOTA_EXCEEDED_ERR","NOT_FOUND_ERR","SECURITY_ERR","INVALID_MODIFICATION_ERR","INVALID_STATE_ERR","localfs","requestFileSystem","webkitRequestFileSystem","FileSystem","resolveLocalFileSystemURL","webkitResolveLocalFileSystemURL","MozBlobBuilder","WebKitBlobBuilder","BlobBuilder","_fs","_isPersisted","_cwd","root","readfileAsArrayBuffer","callback","errback","getFile","fileEntry","onloadend","readfileAsDataURL","readfileAsText","writefile","contents","folders","mkdir","createWriter","fileWriter","truncated","onwriteend","truncate","write","rmfile","readdir","getDirectory","dirEntry","results","folderParts","createDir","rootDir","exclusive","rmdir","removeRecursively","copy","dest","cwd","copyTo","move","moveTo","chdir","onchdir","fullPath","importFromHost","deferred","f","exportToHost","isPersisted","typ","PERSISTENT","TEMPORARY","localStorage","storage","setItem","serializeValue","defaultVal","deserializeValue","getItem","removeItem","clear","store","sessiionStorage","sessionStorage","storages","DataTransfer","_dropEffect","_effectAllowed","_data","Object","defineProperty","enumerable","configurable","keys","clearData","getData","img","offsetX","offsetY","ddt","DragDropTouch","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","addEventListener","passive","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","_this","_shouldHandle","_DBLCLICK","_dispatchEvent","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_getTarget","delta","_getDelta","_THRESHOLD","_createImage","_lastTarget","_moveImage","_destroyImage","defaultPrevented","touches","_dataTransfer","page","clientX","clientY","abs","pt","el","elementFromPoint","pointerEvents","parentElement","cloneNode","_copyStyle","rc","getBoundingClientRect","_OPACITY","requestAnimationFrame","s","zIndex","round","_copyProps","dst","_rmvAtts","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","getContext","drawImage","cs","children","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","hasAttribute","transforms","velm","widgets","defineWidgetClass","delegateEventSplitter","Widget","isHtmlNode","uniqueId","_ensureElement","tagName","selector","$el","find","render","_removeElement","unlistenTo","setElement","undelegateEvents","_setElement","delegateEvents","events","delegate","listener","uid","undelegate","_createElement","_setAttributes","main"],"mappings":"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","file":"../skylark-utils.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils/browser',[\r\n    \"skylark-utils-dom/browser\"\r\n], function(browser) {\r\n    return browser;\r\n});\r\n\ndefine('skylark-utils/css',[\r\n    \"skylark-utils-dom/css\"\r\n], function(css) {\r\n    return css;\r\n});\r\n\ndefine('skylark-utils/datax',[\r\n    \"skylark-utils-dom/datax\"\r\n], function(datax) {\r\n    return datax;\r\n});\r\n\ndefine('skylark-utils/langx',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    return langx;\r\n});\r\n\ndefine('skylark-utils/noder',[\r\n    \"skylark-utils-dom/noder\"\r\n], function(noder) {\r\n    return noder;\r\n});\r\n\ndefine('skylark-utils/finder',[\r\n    \"skylark-utils-dom/finder\"\r\n], function(finder) {\r\n    return finder;\r\n});\r\n\ndefine('skylark-utils/geom',[\r\n    \"skylark-utils-dom/geom\"\r\n], function(geom) {\r\n    return geom;\r\n});\r\n\ndefine('skylark-utils/eventer',[\r\n    \"skylark-utils-dom/eventer\"\r\n], function(eventer) {\r\n    return eventer;\r\n});\r\n\ndefine('skylark-utils/styler',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getComputedStyle(elm, '')\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.styler = styler;\r\n});\ndefine('skylark-utils/dnd',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n        klassName: \"Draggable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this;\r\n\r\n            self.elm = elm;\r\n            self.draggingClass = params.draggingClass || \"dragging\",\r\n                self.params = langx.clone(params);\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var params = self.params;\r\n                    if (params.handle) {\r\n                        self.dragHandle = finder.closest(e.target, params.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (params.source) {\r\n                        self.dragSource = finder.closest(e.target, params.source);\r\n                    } else {\r\n                        self.dragSource = self.elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this,\r\n                draggingClass = params.draggingClass || \"dragging\",\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            self.elm = elm;\r\n            self._params = params;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n\r\n    /*   \r\n     * Make the specified element be in a moveable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function draggable(elm, params) {\r\n        return new Draggable(elm, params);\r\n    }\r\n\r\n    /*   \r\n     * Make the specified element be in a droppable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function droppable(elm, params) {\r\n        return new Droppable(elm, params);\r\n    }\r\n\r\n\r\n    function dnd() {\r\n        return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n        //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable: draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable: droppable,\r\n\r\n        manager: manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});\ndefine('skylark-utils/_devices/usermedia',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.getUserMedia = navigator.getUserMedia\r\n                        || navigator.webkitGetUserMedia\r\n                        || navigator.mozGetUserMedia\r\n                        || navigator.msGetUserMedia;\r\n   \r\n    var Deferred = langx.Deferred,\r\n        localStream  = null;\r\n\r\n    function usermedia() {\r\n        return usermedia;\r\n    }\r\n\r\n    langx.mixin(usermedia, {\r\n        isSupported : function() {\r\n            return !!navigator.getUserMedia;\r\n        },\r\n\r\n        start : function(video,audio) {\r\n\r\n            var d = new Deferred();\r\n            navigator.getUserMedia (\r\n                {video: true,audio: true},\r\n                // successCallback\r\n                function(stream) {\r\n                    localStream = stream;\r\n                    video.src = window.URL.createObjectURL(localMediaStream);\r\n                    video.onloadedmetadata = function(e) {\r\n                         // Do something with the video here.\r\n                    };\r\n                    d.resolve();\r\n                },\r\n\r\n                // errorCallback\r\n                function(err) {\r\n                  d.reject(err);\r\n                }\r\n            );\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        stop : function() {\r\n            if (localStream) {\r\n                localStream.stop();\r\n                localStream = null; \r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return  usermedia;\r\n});\r\n\ndefine('skylark-utils/_devices/vibrate',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.vibrate = navigator.vibrate\r\n                        || navigator.webkitVibrate\r\n                        || navigator.mozVibrate\r\n                        || navigator.msVibrate;\r\n    \r\n\r\n    function vibrate() {\r\n        return vibrate;\r\n    }\r\n\r\n    langx.mixin(vibrate, {\r\n        isSupported : function() {\r\n            return !!navigator.vibrate;\r\n        },\r\n\r\n        start : function(duration) {\r\n            navigator.vibrate(duration);\r\n        },\r\n\r\n        stop : function() {\r\n            navigator.vibrate(0);\r\n        }\r\n    });\r\n\r\n\r\n    return  vibrate;\r\n});\r\n\ndefine('skylark-utils/devices',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./_devices/usermedia\",\r\n    \"./_devices/vibrate\"\r\n], function(skylark,langx,usermedia,vibrate) {\r\n\r\n    function devices() {\r\n        return devices;\r\n    }\r\n\r\n    langx.mixin(devices, {\r\n        usermedia: usermedia,\r\n        vibrate : vibrate\r\n    });\r\n\r\n\r\n    return skylark.devices = devices;\r\n});\r\n\ndefine('skylark-utils/filer',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, datax, eventer, styler) {\r\n    var concat = Array.prototype.concat,\r\n        on = eventer.on,\r\n        attr = eventer.attr,\r\n        Deferred = langx.Deferred,\r\n\r\n        fileInput,\r\n        fileInputForm,\r\n        fileSelected,\r\n        maxFileSize = 1 / 0;\r\n\r\n\r\n    var webentry = (function() {\r\n        function one(entry, path) {\r\n            var d = new Deferred(),\r\n                onError = function(e) {\r\n                    d.reject(e);\r\n                };\r\n\r\n            path = path || '';\r\n            if (entry.isFile) {\r\n                entry.file(function(file) {\r\n                    file.relativePath = path;\r\n                    d.resolve(file);\r\n                }, onError);\r\n            } else if (entry.isDirectory) {\r\n                var dirReader = entry.createReader();\r\n                dirReader.readEntries(function(entries) {\r\n                    all(\r\n                        entries,\r\n                        path + entry.name + '/'\r\n                    ).then(function(files) {\r\n                        d.resolve(files);\r\n                    }).catch(onError);\r\n                }, onError);\r\n            } else {\r\n                // Return an empy list for file system items\r\n                // other than files or directories:\r\n                d.resolve([]);\r\n            }\r\n            return d.promise;\r\n        }\r\n\r\n        function all(entries, path) {\r\n            return Deferred.all(\r\n                langx.map(entries, function(entry) {\r\n                    return one(entry, path);\r\n                })\r\n            ).then(function() {\r\n                return concat.apply([], arguments);\r\n            });\r\n        }\r\n\r\n        return {\r\n            one: one,\r\n            all: all\r\n        };\r\n    })();\r\n\r\n    function dataURLtoBlob(dataurl) {\r\n        var arr = dataurl.split(','),\r\n            mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]),\r\n            n = bstr.length,\r\n            u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], { type: mime });\r\n    }\r\n    /*\r\n     * Make the specified element to could accept HTML5 file drag and drop.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function dropzone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"dropzone\",\r\n            droppedCallback = params.dropped;\r\n\r\n        var enterdCount = 0;\r\n        on(elm, \"dragenter\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n                enterdCount++;\r\n                styler.addClass(elm, hoverClass)\r\n            }\r\n        });\r\n\r\n        on(elm, \"dragover\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n            }\r\n        });\r\n\r\n        on(elm, \"dragleave\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                enterdCount--\r\n                if (enterdCount == 0) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n            }\r\n        });\r\n\r\n        on(elm, \"drop\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                styler.removeClass(elm, hoverClass)\r\n                eventer.stop(e);\r\n                if (droppedCallback) {\r\n                    var items = e.dataTransfer.items;\r\n                    if (items && items.length && (items[0].webkitGetAsEntry ||\r\n                            items[0].getAsEntry)) {\r\n                        webentry.all(\r\n                            langx.map(items, function(item) {\r\n                                if (item.webkitGetAsEntry) {\r\n                                    return item.webkitGetAsEntry();\r\n                                }\r\n                                return item.getAsEntry();\r\n                            })\r\n                        ).then(droppedCallback);\r\n                    } else {\r\n                        droppedCallback(e.dataTransfer.files);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    function pastezone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"pastezone\",\r\n            pastedCallback = params.pasted;\r\n\r\n        on(elm, \"paste\", function(e) {\r\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\r\n                e.originalEvent.clipboardData.items,\r\n                files = [];\r\n            if (items && items.length) {\r\n                langx.each(items, function(index, item) {\r\n                    var file = item.getAsFile && item.getAsFile();\r\n                    if (file) {\r\n                        files.push(file);\r\n                    }\r\n                });\r\n            }\r\n            if (pastedCallback && files.length) {\r\n                pastedCallback(files);\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Make the specified element to pop-up the file selection dialog box when clicked , and read the contents the files selected from client file system by user.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function picker(elm, params) {\r\n        on(elm, \"click\", function(e) {\r\n            e.preventDefault();\r\n            select(params);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function select(params) {\r\n        params = params || {};\r\n        var directory = params.directory || false,\r\n            multiple = params.multiple || false,\r\n            fileSelected = params.picked;\r\n        if (!fileInput) {\r\n            var input = fileInput = document.createElement(\"input\");\r\n\r\n            function selectFiles(pickedFiles) {\r\n                for (var i = pickedFiles.length; i--;) {\r\n                    if (pickedFiles[i].size > maxFileSize) {\r\n                        pickedFiles.splice(i, 1);\r\n                    }\r\n                }\r\n                fileSelected(pickedFiles);\r\n            }\r\n\r\n            input.type = \"file\";\r\n            input.style.position = \"fixed\",\r\n                input.style.left = 0,\r\n                input.style.top = 0,\r\n                input.style.opacity = .001,\r\n                document.body.appendChild(input);\r\n\r\n            input.onchange = function(e) {\r\n                var entries = e.target.webkitEntries || e.target.entries;\r\n\r\n                if (entries && entries.length) {\r\n                    webentry.all(entries).then(function(files) {\r\n                        selectFiles(files);\r\n                    });\r\n                } else {\r\n                    selectFiles(Array.prototype.slice.call(e.target.files));\r\n                }\r\n                // reset to \"\", so selecting the same file next time still trigger the change handler\r\n                input.value = \"\";\r\n            };\r\n        }\r\n        fileInput.multiple = multiple;\r\n        fileInput.webkitdirectory = directory;\r\n        fileInput.click();\r\n    }\r\n\r\n    function upload(params) {\r\n        var xoptions = langx.mixin({\r\n            contentRange: null, //\r\n\r\n            // The parameter name for the file form data (the request argument name).\r\n            // If undefined or empty, the name property of the file input field is\r\n            // used, or \"files[]\" if the file input name property is also empty,\r\n            // can be a string or an array of strings:\r\n            paramName: undefined,\r\n            // By default, each file of a selection is uploaded using an individual\r\n            // request for XHR type uploads. Set to false to upload file\r\n            // selections in one request each:\r\n            singleFileUploads: true,\r\n            // To limit the number of files uploaded with one XHR request,\r\n            // set the following option to an integer greater than 0:\r\n            limitMultiFileUploads: undefined,\r\n            // The following option limits the number of files uploaded with one\r\n            // XHR request to keep the request size under or equal to the defined\r\n            // limit in bytes:\r\n            limitMultiFileUploadSize: undefined,\r\n            // Multipart file uploads add a number of bytes to each uploaded file,\r\n            // therefore the following option adds an overhead for each file used\r\n            // in the limitMultiFileUploadSize configuration:\r\n            limitMultiFileUploadSizeOverhead: 512,\r\n            // Set the following option to true to issue all file upload requests\r\n            // in a sequential order:\r\n            sequentialUploads: false,\r\n            // To limit the number of concurrent uploads,\r\n            // set the following option to an integer greater than 0:\r\n            limitConcurrentUploads: undefined,\r\n            // By default, XHR file uploads are sent as multipart/form-data.\r\n            // The iframe transport is always using multipart/form-data.\r\n            // Set to false to enable non-multipart XHR uploads:\r\n            multipart: true,\r\n            // To upload large files in smaller chunks, set the following option\r\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n            // or the browser does not support the required Blob API, files will\r\n            // be uploaded as a whole.\r\n            maxChunkSize: undefined,\r\n            // When a non-multipart upload or a chunked multipart upload has been\r\n            // aborted, this option can be used to resume the upload by setting\r\n            // it to the size of the already uploaded bytes. This option is most\r\n            // useful when modifying the options object inside of the \"add\" or\r\n            // \"send\" callbacks, as the options are cloned for each file upload.\r\n            uploadedBytes: undefined,\r\n            // By default, failed (abort or error) file uploads are removed from the\r\n            // global progress calculation. Set the following option to false to\r\n            // prevent recalculating the global progress data:\r\n            recalculateProgress: true,\r\n            // Interval in milliseconds to calculate and trigger progress events:\r\n            progressInterval: 100,\r\n            // Interval in milliseconds to calculate progress bitrate:\r\n            bitrateInterval: 500,\r\n            // By default, uploads are started automatically when adding files:\r\n            autoUpload: true,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                uploadedBytes: 'Uploaded bytes exceed file size'\r\n            },\r\n\r\n            // Translation function, gets the message key to be translated\r\n            // and an object with context specific data as arguments:\r\n            i18n: function(message, context) {\r\n                message = this.messages[message] || message.toString();\r\n                if (context) {\r\n                    langx.each(context, function(key, value) {\r\n                        message = message.replace('{' + key + '}', value);\r\n                    });\r\n                }\r\n                return message;\r\n            },\r\n\r\n            // Additional form data to be sent along with the file uploads can be set\r\n            // using this option, which accepts an array of objects with name and\r\n            // value properties, a function returning such an array, a FormData\r\n            // object (for XHR file uploads), or a simple object.\r\n            // The form of the first fileInput is given as parameter to the function:\r\n            formData: function(form) {\r\n                return form.serializeArray();\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop, paste or add API call).\r\n            // If the singleFileUploads option is enabled, this callback will be\r\n            // called once for each file in the selection for XHR file uploads, else\r\n            // once for each file selection.\r\n            //\r\n            // The upload starts when the submit method is invoked on the data parameter.\r\n            // The data object contains a files property holding the added files\r\n            // and allows you to override plugin options as well as define ajax settings.\r\n            //\r\n            // Listeners for this callback can also be bound the following way:\r\n            // .bind('fileuploadadd', func);\r\n            //\r\n            // data.submit() returns a Promise object and allows to attach additional\r\n            // handlers using jQuery's Deferred callbacks:\r\n            // data.submit().done(func).fail(func).always(func);\r\n            add: function(e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                if (data.autoUpload || (data.autoUpload !== false &&\r\n                        $(this).fileupload('option', 'autoUpload'))) {\r\n                    data.process().done(function() {\r\n                        data.submit();\r\n                    });\r\n                }\r\n            },\r\n\r\n            // Other callbacks:\r\n\r\n            // Callback for the submit event of each file upload:\r\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\r\n\r\n            // Callback for the start of each file upload request:\r\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\r\n\r\n            // Callback for successful uploads:\r\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\r\n\r\n            // Callback for failed (abort or error) uploads:\r\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\r\n\r\n            // Callback for completed (success, abort or error) requests:\r\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\r\n\r\n            // Callback for upload progress events:\r\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\r\n\r\n            // Callback for global upload progress events:\r\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\r\n\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            // start: function (e) {}, // .bind('fileuploadstart', func);\r\n\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\r\n\r\n            // Callback for change events of the fileInput(s):\r\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\r\n\r\n            // Callback for paste events to the pasteZone(s):\r\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\r\n\r\n            // Callback for drop events of the dropZone(s):\r\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\r\n\r\n            // Callback for dragover events of the dropZone(s):\r\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\r\n\r\n            // Callback for the start of each chunk upload request:\r\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\r\n\r\n            // Callback for successful chunk uploads:\r\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\r\n\r\n            // Callback for failed (abort or error) chunk uploads:\r\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\r\n\r\n            // Callback for completed (success, abort or error) chunk upload requests:\r\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\r\n\r\n            // The plugin options are used as settings object for the ajax calls.\r\n            // The following are jQuery ajax settings required for the file uploads:\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        }, params);\r\n\r\n        var blobSlice = function() {\r\n                var slice = Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice;\r\n                return slice.apply(this, arguments);\r\n            },\r\n            ajax = function(data) {\r\n                return langx.Xhr.request(data.url, data);\r\n            };\r\n\r\n        function initDataSettings(o) {\r\n            o.type = o.type || \"POST\";\r\n\r\n            if (!chunkedUpload(o, true)) {\r\n                if (!o.data) {\r\n                    initXHRData(o);\r\n                }\r\n                //initProgressListener(o);\r\n            }\r\n        }\r\n\r\n        function initXHRData(o) {\r\n            var that = this,\r\n                formData,\r\n                file = o.files[0],\r\n                // Ignore non-multipart setting if not supported:\r\n                multipart = o.multipart,\r\n                paramName = langx.type(o.paramName) === 'array' ?\r\n                o.paramName[0] : o.paramName;\r\n\r\n            o.headers = langx.mixin({}, o.headers);\r\n            if (o.contentRange) {\r\n                o.headers['Content-Range'] = o.contentRange;\r\n            }\r\n            if (!multipart) {\r\n                o.headers['Content-Disposition'] = 'attachment; filename=\"' +\r\n                    encodeURI(file.name) + '\"';\r\n                o.contentType = file.type || 'application/octet-stream';\r\n                o.data = o.blob || file;\r\n            } else {\r\n                formData = new FormData();\r\n                if (o.blob) {\r\n                    formData.append(paramName, o.blob, file.name);\r\n                } else {\r\n                    langx.each(o.files, function(index, file) {\r\n                        // This check allows the tests to run with\r\n                        // dummy objects:\r\n                        formData.append(\r\n                            (langx.type(o.paramName) === 'array' &&\r\n                                o.paramName[index]) || paramName,\r\n                            file,\r\n                            file.uploadName || file.name\r\n                        );\r\n                    });\r\n                }\r\n                o.data = formData;\r\n            }\r\n            // Blob reference is not needed anymore, free memory:\r\n            o.blob = null;\r\n        }\r\n\r\n        function getTotal(files) {\r\n            var total = 0;\r\n            langx.each(files, function(index, file) {\r\n                total += file.size || 1;\r\n            });\r\n            return total;\r\n        }\r\n\r\n        function getUploadedBytes(jqXHR) {\r\n            var range = jqXHR.getResponseHeader('Range'),\r\n                parts = range && range.split('-'),\r\n                upperBytesPos = parts && parts.length > 1 &&\r\n                parseInt(parts[1], 10);\r\n            return upperBytesPos && upperBytesPos + 1;\r\n        }\r\n\r\n        function initProgressObject(obj) {\r\n            var progress = {\r\n                loaded: 0,\r\n                total: 0,\r\n                bitrate: 0\r\n            };\r\n            if (obj._progress) {\r\n                langx.mixin(obj._progress, progress);\r\n            } else {\r\n                obj._progress = progress;\r\n            }\r\n        }\r\n\r\n        function BitrateTimer() {\r\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\r\n            this.loaded = 0;\r\n            this.bitrate = 0;\r\n            this.getBitrate = function(now, loaded, interval) {\r\n                var timeDiff = now - this.timestamp;\r\n                if (!this.bitrate || !interval || timeDiff > interval) {\r\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n                    this.loaded = loaded;\r\n                    this.timestamp = now;\r\n                }\r\n                return this.bitrate;\r\n            };\r\n        }\r\n\r\n        function chunkedUpload(options, testOnly) {\r\n            options.uploadedBytes = options.uploadedBytes || 0;\r\n            var that = this,\r\n                file = options.files[0],\r\n                fs = file.size,\r\n                ub = options.uploadedBytes,\r\n                mcs = options.maxChunkSize || fs,\r\n                slice = blobSlice,\r\n                dfd = new Deferred(),\r\n                promise = dfd.promise,\r\n                jqXHR,\r\n                upload;\r\n            if (!(slice && (ub || mcs < fs)) ||\r\n                options.data) {\r\n                return false;\r\n            }\r\n            if (testOnly) {\r\n                return true;\r\n            }\r\n            if (ub >= fs) {\r\n                file.error = options.i18n('uploadedBytes');\r\n                return this._getXHRPromise(\r\n                    false,\r\n                    options.context, [null, 'error', file.error]\r\n                );\r\n            }\r\n            // The chunk upload method:\r\n            upload = function() {\r\n                // Clone the options object for each chunk upload:\r\n                var o = langx.mixin({}, options),\r\n                    currentLoaded = o._progress.loaded;\r\n                o.blob = slice.call(\r\n                    file,\r\n                    ub,\r\n                    ub + mcs,\r\n                    file.type\r\n                );\r\n                // Store the current chunk size, as the blob itself\r\n                // will be dereferenced after data processing:\r\n                o.chunkSize = o.blob.size;\r\n                // Expose the chunk bytes position range:\r\n                o.contentRange = 'bytes ' + ub + '-' +\r\n                    (ub + o.chunkSize - 1) + '/' + fs;\r\n                // Process the upload data (the blob and potential form data):\r\n                initXHRData(o);\r\n                // Add progress listeners for this chunk upload:\r\n                //initProgressListener(o);\r\n                jqXHR = $.ajax(o).done(function(result, textStatus, jqXHR) {\r\n                        ub = getUploadedBytes(jqXHR) ||\r\n                            (ub + o.chunkSize);\r\n                        // Create a progress event if no final progress event\r\n                        // with loaded equaling total has been triggered\r\n                        // for this chunk:\r\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\r\n                            dfd.progress({\r\n                                lengthComputable: true,\r\n                                loaded: ub - o.uploadedBytes,\r\n                                total: ub - o.uploadedBytes\r\n                            });\r\n                        }\r\n                        options.uploadedBytes = o.uploadedBytes = ub;\r\n                        o.result = result;\r\n                        o.textStatus = textStatus;\r\n                        o.jqXHR = jqXHR;\r\n                        //that._trigger('chunkdone', null, o);\r\n                        //that._trigger('chunkalways', null, o);\r\n                        if (ub < fs) {\r\n                            // File upload not yet complete,\r\n                            // continue with the next chunk:\r\n                            upload();\r\n                        } else {\r\n                            dfd.resolveWith(\r\n                                o.context, [result, textStatus, jqXHR]\r\n                            );\r\n                        }\r\n                    })\r\n                    .fail(function(jqXHR, textStatus, errorThrown) {\r\n                        o.jqXHR = jqXHR;\r\n                        o.textStatus = textStatus;\r\n                        o.errorThrown = errorThrown;\r\n                        //that._trigger('chunkfail', null, o);\r\n                        //that._trigger('chunkalways', null, o);\r\n                        dfd.rejectWith(\r\n                            o.context, [jqXHR, textStatus, errorThrown]\r\n                        );\r\n                    });\r\n            };\r\n            //this._enhancePromise(promise);\r\n            promise.abort = function() {\r\n                return jqXHR.abort();\r\n            };\r\n            upload();\r\n            return promise;\r\n        }\r\n\r\n        initDataSettings(xoptions);\r\n\r\n        xoptions._bitrateTimer = new BitrateTimer();\r\n\r\n        var jqXhr = chunkedUpload(xoptions) || ajax(xoptions);\r\n\r\n        jqXhr.options = xoptions;\r\n\r\n        return jqXhr;\r\n    }\r\n\r\n    var filer = function() {\r\n        return filer;\r\n    };\r\n\r\n    langx.mixin(filer, {\r\n        dropzone: dropzone,\r\n\r\n        pastezone: pastezone,\r\n\r\n        picker: picker,\r\n\r\n        select: select,\r\n\r\n        upload: upload,\r\n\r\n        readFile: function(file, params) {\r\n            params = params || {};\r\n            var d = new Deferred,\r\n                reader = new FileReader();\r\n\r\n            reader.onload = function(evt) {\r\n                d.resolve(evt.target.result);\r\n            };\r\n            reader.onerror = function(e) {\r\n                var code = e.target.error.code;\r\n                if (code === 2) {\r\n                    alert('please don\\'t open this page using protocol fill:///');\r\n                } else {\r\n                    alert('error code: ' + code);\r\n                }\r\n            };\r\n\r\n            if (params.asArrayBuffer) {\r\n                reader.readAsArrayBuffer(file);\r\n            } else if (params.asDataUrl) {\r\n                reader.readAsDataURL(file);\r\n            } else if (params.asText) {\r\n                reader.readAsText(file);\r\n            } else {\r\n                reader.readAsArrayBuffer(file);\r\n            }\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        writeFile: function(data, name) {\r\n            if (window.navigator.msSaveBlob) {\r\n                if (langx.isString(data)) {\r\n                    data = dataURItoBlob(data);\r\n                }\r\n                window.navigator.msSaveBlob(data, name);\r\n            } else {\r\n                var a = document.createElement('a');\r\n                if (data instanceof Blob) {\r\n                    data = langx.URL.createObjectURL(data);\r\n                }\r\n                a.href = data;\r\n                a.setAttribute('download', name || 'noname');\r\n                a.dispatchEvent(new CustomEvent('click'));\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return skylark.filer = filer;\r\n});\ndefine('skylark-utils/fx',[\r\n    \"skylark-utils-dom/fx\"\r\n], function(fx) {\r\n    return fx;\r\n});\r\n\ndefine('skylark-utils/images',[\r\n    \"skylark-utils-dom/images\"\r\n], function(images) {\r\n    return images;\r\n});\r\n\ndefine('skylark-utils/models',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark,langx) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"init\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return skylark.models = models;\r\n});\r\n\ndefine('skylark-utils/query',[\r\n    \"skylark-utils-dom/query\"\r\n], function(query) {\r\n    return query;\r\n});\r\n\ndefine('skylark-utils/scripter',[\r\n    \"skylark-utils-dom/scripter\"\r\n], function(scripter) {\r\n    return scripter;\r\n});\r\n\ndefine('skylark-utils/_storages/cookies',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    function cookies() {\r\n        return cookies;\r\n    }\r\n\r\n    langx.mixin(cookies, {\r\n\t\tget : function(name) {\r\n\t\t    if (!sKey || !this.has(name)) { return null; }\r\n\t\t\t\treturn unescape(document.cookie.replace(new RegExp(\"(?:^|.*;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"),\"$1\"));\r\n\r\n\t\t},\r\n\r\n\t\thas : function(name) {\r\n\t\t\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie);\r\n\t\t},\r\n\r\n\r\n\t\tlist : function() {\r\n\t\t    var cookies = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\").split(/\\s*(?:\\=[^;]*)?;\\s*/);\r\n\t\t    for (var i = 0; i < cookies.length; i++) { \r\n\t\t    \tcookies[i] = unescape(cookies[i]); \r\n\t\t    }\r\n\t\t    return cookies;\r\n\t\t},\r\n\r\n\t\tremove : function(name,path) {\r\n\t\t    if (!name || !this.has(name)) { \r\n\t\t    \treturn; \r\n\t\t   \t}\r\n\t\t    document.cookie = escape(name) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" + (path ? \"; path=\" + path : \"\");\r\n\t\t},\r\n\r\n\t\tset: function (name, value, expires, path, domain, secure) {\r\n\t\t    if (!name || /^(?:expires|max\\-age|path|domain|secure)$/i.test(name)) { return; }\r\n\t\t    var sExpires = \"\";\r\n\t\t    if (expires) {\r\n\t\t      switch (expires.constructor) {\r\n\t\t        case Number:\r\n\t\t          sExpires = vEnd === Infinity ? \"; expires=Tue, 19 Jan 2038 03:14:07 GMT\" : \"; max-age=\" + expires;\r\n\t\t          break;\r\n\t\t        case String:\r\n\t\t          sExpires = \"; expires=\" + expires;\r\n\t\t          break;\r\n\t\t        case Date:\r\n\t\t          sExpires = \"; expires=\" + expires.toGMTString();\r\n\t\t          break;\r\n\t\t      }\r\n\t\t    }\r\n\t\t    document.cookie = escape(name) + \"=\" + escape(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secure ? \"; secure\" : \"\");\r\n\t\t  }\t\r\n    });\r\n\r\n\r\n    return  cookies;\r\n\r\n});\r\n\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2014/02/28\r\n */\r\ndefine('skylark-utils/_storages/localfs',[\r\n    \"../langx\"\r\n], function(langx){\r\n\tvar Deferred = langx.Deferred,\r\n\t\trequestFileSystem =  window.requestFileSystem || window.webkitRequestFileSystem,\r\n\t\tresolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL,\r\n     \tBlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;\r\n\r\n\r\n\tfunction errorHandler(e) {\r\n\t  var msg = '';\r\n\r\n\t  switch (e.code) {\r\n\t    case FileError.QUOTA_EXCEEDED_ERR:\r\n\t      msg = 'QUOTA_EXCEEDED_ERR';\r\n\t      break;\r\n\t    case FileError.NOT_FOUND_ERR:\r\n\t      msg = 'NOT_FOUND_ERR';\r\n\t      break;\r\n\t    case FileError.SECURITY_ERR:\r\n\t      msg = 'SECURITY_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_MODIFICATION_ERR:\r\n\t      msg = 'INVALID_MODIFICATION_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_STATE_ERR:\r\n\t      msg = 'INVALID_STATE_ERR';\r\n\t      break;\r\n\t    default:\r\n\t      msg = 'Unknown Error';\r\n\t      break;\r\n\t  };\r\n\r\n\t  return msg;\r\n\t}\r\n\t\r\n\tvar FileSystem = langx.Evented.inherit({\r\n\t\t_fs : null,\r\n\t\t_isPersisted : true,\r\n\t\t_cwd : null,\r\n\r\n\t\tinit:\tfunction (fs) {\r\n\t\t\tthis._fs = fs;\r\n\t\t\tthis._cwd = fs.root;\r\n\t\t},\r\n\t\t\t\r\n\r\n\t\treadfileAsArrayBuffer :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsArrayBuffer(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsDataURL :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsDataURL(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsText :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsText(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\twritefile : function (path, contents, callback,errback) {\r\n\t\t    var self = this,\r\n\t\t    \tfolders = path.split('/');\r\n\t\t    folders = folders.slice(0, folders.length - 1);\r\n\r\n\t\t    this.mkdir(folders.join('/'),function(){\r\n\t\t\t    self._cwd.getFile(path, {create: true}, function (fileEntry) {\r\n\t\t\t      fileEntry.createWriter(function (fileWriter) {\r\n\t\t\t        var truncated = false;\r\n\t\t\t        fileWriter.onwriteend = function () {\r\n\t\t\t          if (!truncated) {\r\n\t\t\t            truncated = true;\r\n\t\t\t            this.truncate(this.position);\r\n\t\t\t            return;\r\n\t\t\t          }\r\n\t\t\t          callback && callback();\r\n\t\t\t        };\r\n\t\t\t        fileWriter.onerror = errback;\r\n\t\t\t        // TODO: find a way to write as binary too\r\n\t\t\t        var blob = contents;\r\n\t\t\t        if (!blob instanceof Blob) {\r\n\t\t\t        \tblob = new Blob([contents], {type: 'text/plain'});\r\n\t\t\t        } \r\n\t\t\t        fileWriter.write(blob);\r\n\t\t\t      }, errback);\r\n\t\t\t    }, errback);\r\n\r\n\t\t    });\r\n\t\t},\r\n\r\n\t\trmfile : function (path, callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.remove(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treaddir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      var dirReader = dirEntry.createReader();\r\n\t\t      var entries = [];\r\n\t\t      readEntries();\r\n\t\t      function readEntries() {\r\n\t\t        dirReader.readEntries(function (results) {\r\n\t\t          if (!results.length) {\r\n\t\t            callback(null, entries);\r\n\t\t          }\r\n\t\t          else {\r\n\t\t            entries = entries.concat(\r\n\t\t            \tArray.prototype.slice.call(results).map(\r\n\t\t            \t\tfunction (entry) {\r\n\t\t              \t\t\treturn entry.name + (entry.isDirectory ? \"/\" : \"\");\r\n\t\t            \t\t}\r\n\t\t            \t)\r\n\t\t            );\r\n\t\t            readEntries();\r\n\t\t          }\r\n\t\t        }, errback);\r\n\t\t      }\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\tmkdir : function (path, callback,errback) {\r\n\t\t    var folderParts = path.split('/');\r\n\r\n\t\t    var createDir = function(rootDir, folders) {\r\n\t\t      // Throw out './' or '/' and move on. Prevents: '/foo/.//bar'.\r\n\t\t      if (folders[0] == '.' || folders[0] == '') {\r\n\t\t        folders = folders.slice(1);\r\n\t\t      }\r\n\r\n\t\t      if (folders.length ==0) {\r\n\t\t      \tcallback(rootDir);\r\n\t\t      \treturn;\r\n\t\t      }\r\n\t\t      rootDir.getDirectory(folders[0], {create: true, exclusive: false},\r\n\t\t        function (dirEntry) {\r\n\t\t          if (dirEntry.isDirectory) { // TODO: check shouldn't be necessary.\r\n\t\t            // Recursively add the new subfolder if we have more to create and\r\n\t\t            // There was more than one folder to create.\r\n\t\t            if (folders.length && folderParts.length != 1) {\r\n\t\t              createDir(dirEntry, folders.slice(1));\r\n\t\t            } else {\r\n\t\t              // Return the last directory that was created.\r\n\t\t              if (callback) callback(dirEntry);\r\n\t\t            }\r\n\t\t          } else {\r\n\t\t            var e = new Error(path + ' is not a directory');\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t          }\r\n\t\t        },\r\n\t\t        function(e) {\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t        }\r\n\t\t      );\r\n\t\t    };\r\n\r\n\t\t    createDir(this._cwd, folderParts);\r\n\r\n\t\t},\r\n\r\n\t\trmdir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      dirEntry.removeRecursively(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t  },\r\n\r\n\t\tcopy : function (src, dest, callback) {\r\n\t\t    // TODO: make sure works for cases where dest includes and excludes file name.\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.copyTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tmove : function(src, dest, callback) {\r\n\t\t    // TODO: handle more cases like file renames and moving/renaming directories\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.moveTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tchdir : function (path, callback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      cwd = dirEntry;\r\n\t\t      if (fs.onchdir) {\r\n\t\t        fs.onchdir(cwd.fullPath);\r\n\t\t      }\r\n\t\t      callback();\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\timportFromHost : function(files) {\r\n\t\t    // Duplicate each file the user selected to the app's fs.\r\n\t\t    var deferred = new Deferred();\r\n\t\t    for (var i = 0, file; file = files[i]; ++i) {\r\n\t\t        (function(f) {\r\n\t\t\t        cwd.getFile(file.name, {create: true, exclusive: true}, function(fileEntry) {\r\n\t\t\t          fileEntry.createWriter(function(fileWriter) {\r\n\t\t\t            fileWriter.write(f); // Note: write() can take a File or Blob object.\r\n\t\t\t          }, errorHandler);\r\n\t\t\t        }, errorHandler);\r\n\t\t     \t})(file);\r\n \t   \t \t}\r\n  \t\t    return deferred.promise;\r\n\t\t  },\r\n\r\n\t\t  exportToHost : function() {\r\n\r\n\t\t  }\r\n\t\r\n\t});\r\n\t\r\n\r\n\r\n    function localfs() {\r\n        return localfs;\r\n    }\r\n\r\n    langx.mixin(localfs, {\r\n        isSupported : function() {\r\n            return !!requestFileSystem;\r\n        },\r\n        request : function(size,isPersisted){\r\n        \tsize = size || 1024 * 1024 * 10;\r\n        \tvar typ = isPersisted ? PERSISTENT : TEMPORARY,\r\n        \t\td = new Deferred();\r\n            requestFileSystem(typ, size, function(_fs) {\r\n                var fs = new FileSystem(_fs,!!isPersisted);\r\n                d.resolve(fs);\r\n            }, function(e) {\r\n            \td.reject(e);\r\n            });\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        FileSystem : FileSystem\r\n    });\r\n    \r\n\treturn localfs;\r\n});\ndefine('skylark-utils/_storages/localStorage',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"localStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function localStorage() {\r\n        return localStorage;\r\n    }\r\n\r\n    langx.mixin(localStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, langx.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = langx.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        forEach : function(callback) {\r\n            for (var i=0; i<storage.length; i++) {\r\n                var key = storage.key(i)\r\n                callback(key, store.get(key))\r\n            }\r\n        }\r\n    });\r\n\r\n    return  localStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-utils/_storages/sessionStorage',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"sessiionStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function sessiionStorage() {\r\n        return sessiionStorage;\r\n    }\r\n\r\n    langx.mixin(sessiionStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, langx.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = langx.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        forEach : function(callback) {\r\n            for (var i=0; i<storage.length; i++) {\r\n                var key = storage.key(i)\r\n                callback(key, store.get(key))\r\n            }\r\n        }\r\n    });\r\n\r\n    return  sessiionStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-utils/storages',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./_storages/cookies\",\r\n    \"./_storages/localfs\",\r\n    \"./_storages/localStorage\",\r\n    \"./_storages/sessionStorage\"\r\n], function(skylark,langx,cookies,localfs,localStorage,sessionStorage) {\r\n    function storages() {\r\n        return storages;\r\n    }\r\n\r\n    langx.mixin(storages, {\r\n        cookies: cookies,\r\n        localfs : localfs,\r\n        localStorage : localStorage,\r\n        sessionStorage : sessionStorage\r\n    });\r\n\r\n\r\n    return skylark.storages = storages;\r\n});\r\n\ndefine('skylark-utils/touchx',[], function() {\r\n\r\n    //The following code is borrow from DragDropTouch (https://github.com/Bernardo-Castilho/dragdroptouch)\r\n\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function() {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function() {\r\n                return this._dropEffect;\r\n            },\r\n            set: function(value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function() {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function(value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function() {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function(type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            } else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function(type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function(type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function(img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function() {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', null, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if ('ontouchstart' in document) {\r\n                var d = document,\r\n                    ts = this._touchstart.bind(this),\r\n                    tm = this._touchmove.bind(this),\r\n                    te = this._touchend.bind(this),\r\n                    opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function() {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function(e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function() {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img) {\r\n                    var delta = this._getDelta(e);\r\n                    if (delta > DragDropTouch._THRESHOLD) {\r\n                        this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                        this._createImage(e);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                    }\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function(e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function() {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._dataTransfer = new DataTransfer();\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function(e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function(e) {\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function(e) {\r\n            var pt = this._getPoint(e),\r\n                el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function(e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(),\r\n                    pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function() {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function(e) {\r\n            var _this = this;\r\n            if (this._img) {\r\n                requestAnimationFrame(function() {\r\n                    var pt = _this._getPoint(e, true),\r\n                        s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                });\r\n            }\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function(dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function(src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function(att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src,\r\n                    cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function(e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'),\r\n                    t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function(e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n\r\n    /*private*/\r\n    DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\r\n\r\n    return DragDropTouch;\r\n});\r\n\ndefine('skylark-utils/transforms',[\r\n    \"skylark-utils-dom/transforms\"\r\n], function(transforms) {\r\n    return transforms;\r\n});\r\n\ndefine('skylark-utils/velm',[\r\n    \"skylark-utils-dom/velm\"\r\n], function(velm) {\r\n    return velm;\r\n});\r\n\ndefine('skylark-utils/widgets',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./styler\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./query\",\r\n    \"./velm\"\r\n], function(skylark,langx,noder, datax, styler, geom, eventer,query,velm) {\r\n\t// Cached regex to split keys for `delegate`.\r\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/,\r\n\t\tslice = Array.prototype.slice;\r\n\r\n\r\n\tfunction bridge( name, object ) {\r\n\t\tvar fullName = object.prototype.widgetFullName || name,\r\n\t\t\tfn = {};\r\n\r\n\t\tfunction _delegate (isQuery) {\r\n\r\n\t\t}\r\n\r\n\t\tfn[name] = function( options ) {\r\n\t\t\tvar isMethodCall = typeof options === \"string\";\r\n\t\t\tvar args = slice.call( arguments, 1 );\r\n\t\t\tvar returnValue = this;\r\n\r\n\t\t\tif ( isMethodCall ) {\r\n\r\n\t\t\t\t// If this is an empty collection, we need to have the instance method\r\n\t\t\t\t// return undefined instead of the jQuery instance\r\n\t\t\t\tif ( !this.length && options === \"instance\" ) {\r\n\t\t\t\t\treturnValue = undefined;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.each( function() {\r\n\t\t\t\t\t\tvar methodValue;\r\n\t\t\t\t\t\tvar instance = datax.data( this, fullName );\r\n\r\n\t\t\t\t\t\tif ( options === \"instance\" ) {\r\n\t\t\t\t\t\t\treturnValue = instance;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( !instance ) {\r\n\t\t\t\t\t\t\treturn $.error( \"cannot call methods on \" + name +\r\n\t\t\t\t\t\t\t\t\" prior to initialization; \" +\r\n\t\t\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( !langx.isFunction( instance[ options ] ) || options.charAt( 0 ) === \"_\" ) {\r\n\t\t\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name +\r\n\t\t\t\t\t\t\t\t\" widget instance\" );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\r\n\r\n\t\t\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\r\n\t\t\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\r\n\t\t\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\r\n\t\t\t\t\t\t\t\tmethodValue;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Allow multiple hashes to be passed on init\r\n\t\t\t\tif ( args.length ) {\r\n\t\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat( args ) );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.each( function() {\r\n\t\t\t\t\tvar instance = datax.data( this, fullName );\r\n\t\t\t\t\tif ( instance ) {\r\n\t\t\t\t\t\tinstance.option( options || {} );\r\n\t\t\t\t\t\tif ( instance._init ) {\r\n\t\t\t\t\t\t\tinstance._init();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdatax.data( this, fullName, new object( options, this ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\treturn returnValue;\r\n\t\t};\r\n\t};\r\n\r\n\tfunction widgets() {\r\n\t    return widgets;\r\n\t}\r\n\r\n\tvar Widget = langx.Evented.inherit({\r\n\t    init :function(el,options) {\r\n\t    \t//for supporting init(options,el)\r\n\t        if (langx.isHtmlNode(options)) {\r\n\t        \tvar _t = el,\r\n\t        \t\toptions = el;\r\n\t            el = options;\r\n\t        }\r\n\t        if (langx.isHtmlNode(el)) { \r\n\t        \tthis.el = el;\r\n\t    \t} else {\r\n\t    \t\tthis.el = null;\r\n\t    \t}\r\n\t        if (options) {\r\n\t            langx.mixin(this,options);\r\n\t        }\r\n\t        if (!this.cid) {\r\n\t            this.cid = langx.uniqueId('w');\r\n\t        }\r\n\t        this._ensureElement();\r\n\t    },\r\n\r\n\t    // The default `tagName` of a View's element is `\"div\"`.\r\n\t    tagName: 'div',\r\n\r\n\t    // query delegate for element lookup, scoped to DOM elements within the\r\n\t    // current view. This should be preferred to global lookups where possible.\r\n\t    $: function(selector) {\r\n\t      return this.$el.find(selector);\r\n\t    },\r\n\r\n\t    // **render** is the core function that your view should override, in order\r\n\t    // to populate its element (`this.el`), with the appropriate HTML. The\r\n\t    // convention is for **render** to always return `this`.\r\n\t    render: function() {\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view by taking the element out of the DOM, and removing any\r\n\t    // applicable Backbone.Events listeners.\r\n\t    remove: function() {\r\n\t      this._removeElement();\r\n\t      this.unlistenTo();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view's element from the document and all event listeners\r\n\t    // attached to it. Exposed for subclasses using an alternative DOM\r\n\t    // manipulation API.\r\n\t    _removeElement: function() {\r\n\t      this.$el.remove();\r\n\t    },\r\n\r\n\t    // Change the view's element (`this.el` property) and re-delegate the\r\n\t    // view's events on the new element.\r\n\t    setElement: function(element) {\r\n\t      this.undelegateEvents();\r\n\t      this._setElement(element);\r\n\t      this.delegateEvents();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Creates the `this.el` and `this.$el` references for this view using the\r\n\t    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\r\n\t    // context or an element. Subclasses can override this to utilize an\r\n\t    // alternative DOM manipulation API and are only required to set the\r\n\t    // `this.el` property.\r\n\t    _setElement: function(el) {\r\n\t      this.$el = widgets.$(el);\r\n\t      this.el = this.$el[0];\r\n\t    },\r\n\r\n\t    // Set callbacks, where `this.events` is a hash of\r\n\t    //\r\n\t    // *{\"event selector\": \"callback\"}*\r\n\t    //\r\n\t    //     {\r\n\t    //       'mousedown .title':  'edit',\r\n\t    //       'click .button':     'save',\r\n\t    //       'click .open':       function(e) { ... }\r\n\t    //     }\r\n\t    //\r\n\t    // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n\t    // Uses event delegation for efficiency.\r\n\t    // Omitting the selector binds the event to `this.el`.\r\n\t    delegateEvents: function(events) {\r\n\t      events || (events = langx.result(this, 'events'));\r\n\t      if (!events) return this;\r\n\t      this.undelegateEvents();\r\n\t      for (var key in events) {\r\n\t        var method = events[key];\r\n\t        if (!langx.isFunction(method)) method = this[method];\r\n\t        if (!method) continue;\r\n\t        var match = key.match(delegateEventSplitter);\r\n\t        this.delegate(match[1], match[2], langx.proxy(method, this));\r\n\t      }\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Add a single event listener to the view's element (or a child element\r\n\t    // using `selector`). This only works for delegate-able events: not `focus`,\r\n\t    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\r\n\t    delegate: function(eventName, selector, listener) {\r\n\t      this.$el.on(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Clears all callbacks previously bound to the view by `delegateEvents`.\r\n\t    // You usually don't need to use this, but may wish to if you have multiple\r\n\t    // Backbone views attached to the same DOM element.\r\n\t    undelegateEvents: function() {\r\n\t      if (this.$el) this.$el.off('.delegateEvents' + this.uid);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // A finer-grained `undelegateEvents` for removing a single delegated event.\r\n\t    // `selector` and `listener` are both optional.\r\n\t    undelegate: function(eventName, selector, listener) {\r\n\t      this.$el.off(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Produces a DOM element to be assigned to your view. Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _createElement: function(tagName,attrs) {\r\n\t      return noder.createElement(tagName,attrs);\r\n\t    },\r\n\r\n\t    // Ensure that the View has a DOM element to render into.\r\n\t    // If `this.el` is a string, pass it through `$()`, take the first\r\n\t    // matching element, and re-assign it to `el`. Otherwise, create\r\n\t    // an element from the `id`, `className` and `tagName` properties.\r\n\t    _ensureElement: function() {\r\n\t      if (!this.el) {\r\n\t        var attrs = langx.mixin({}, langx.result(this, 'attributes'));\r\n\t        if (this.id) attrs.id = langx.result(this, 'id');\r\n\t        if (this.className) attrs['class'] = langx.result(this, 'className');\r\n\t        this.setElement(this._createElement(langx.result(this, 'tagName'),attrs));\r\n\t        this._setAttributes(attrs);\r\n\t      } else {\r\n\t        this.setElement(langx.result(this, 'el'));\r\n\t      }\r\n\t    },\r\n\r\n\t    // Set attributes from a hash on this view's element.  Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _setAttributes: function(attributes) {\r\n\t      this.$el.attr(attributes);\r\n\t    },\r\n\r\n\t    // Translation function, gets the message key to be translated\r\n\t    // and an object with context specific data as arguments:\r\n\t    i18n: function (message, context) {\r\n\t        message = (this.messages && this.messages[message]) || message.toString();\r\n\t        if (context) {\r\n\t            langx.each(context, function (key, value) {\r\n\t                message = message.replace('{' + key + '}', value);\r\n\t            });\r\n\t        }\r\n\t        return message;\r\n\t    },\r\n\r\n\t\t});\r\n\r\n\tfunction defineWidgetClass(name,base,prototype) {\r\n\r\n\t};\r\n\r\n\tlangx.mixin(widgets, {\r\n\t\t$ : query,\r\n\r\n\t\tdefine : defineWidgetClass,\r\n\t\tWidget : Widget\r\n\t});\r\n\r\n\r\n\treturn skylark.widgets = widgets;\r\n});\r\n\ndefine('skylark-utils/main',[\r\n    \"./skylark\",\r\n    \"./browser\",\r\n    \"./css\",\r\n    \"./datax\",\r\n    \"./dnd\",\r\n    \"./devices\",\r\n    \"./eventer\",\r\n    \"./filer\",\r\n    \"./finder\",\r\n    \"./fx\",\r\n    \"./geom\",\r\n    \"./images\",\r\n    \"./models\",\r\n    \"./noder\",\r\n    \"./query\",\r\n    \"./scripter\",\r\n    \"./storages\",\r\n    \"./styler\",\r\n    \"./touchx\",\r\n    \"./transforms\",\r\n    \"./langx\",\r\n    \"./velm\",\r\n    \"./widgets\"\r\n], function(skylark) {\r\n    return skylark;\r\n})\r\n;\ndefine('skylark-utils', ['skylark-utils/main'], function (main) { return main; });\n\n"]}