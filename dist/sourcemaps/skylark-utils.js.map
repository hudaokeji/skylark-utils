{"version":3,"sources":["skylark-utils.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","browser","css","datax","langx","noder","finder","geom","eventer","maybeAddPx","name","value","cssNumber","dasherize","classRE","classReCache","RegExp","className","node","klass","svg","undefined","baseVal","disabled","elm","arguments","this","dom","defaultDisplay","nodeName","element","display","elementDisplay","document","createElement","body","appendChild","getComputedStyle","getPropertyValue","parentNode","removeChild","show","styler","isInvisible","hide","addClass","names","cls","isString","re","match","property","computedStyle","style","camelCase","isArrayLike","props","call","prop","removeProperty","key","cssText","hasClass","removeClass","replace","trim","toggleClass","when","self","Array","prototype","every","column-count","columns","font-weight","line-height","opacity","z-index","zoom","mixin","autocssfix","cssHooks","draggable","params","Draggable","droppable","Droppable","dnd","DndManager","on","off","attr","removeAttr","pagePosition","height","Evented","inherit","klassName","init","prepare","e","create","dragSource","dragHandle","trigger","start","event","p","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","manager","clone","eventName","isFunction","mousedown","handle","closest","target","source","mouseup","dragstart","dragend","stop","hoverClass","activeClass","acceptable","_params","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","usermedia","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Deferred","localStream","isSupported","video","audio","d","stream","src","URL","createObjectURL","localMediaStream","onloadedmetadata","resolve","err","reject","promise","vibrate","webkitVibrate","mozVibrate","msVibrate","duration","devices","filer","fx","images","models","methodMap","update","patch","delete","read","sync","method","entity","options","type","defaults","emulateHTTP","emulateJSON","dataType","url","result","urlError","data","contentType","JSON","stringify","attrs","toJSON","_method","beforeSend","xhr","setRequestHeader","processData","error","textStatus","errorThrown","context","Xhr","request","Entity","Stateful","matches","isMatch","attributes","fetch","parse","success","resp","serverAttrs","set","wrapError","save","val","validate","wait","_validate","isNew","destroy","stopListening","collection","defer","get","idAttribute","encodeURIComponent","Collection","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","tail","partial","initialize","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","proxy","sortBy","pluck","callbackOpts","constructor","validationError","indexOf","_onEntityEvent","prevId","previousAttributes","query","scripter","cookies","sKey","unescape","cookie","escape","test","list","path","expires","domain","secure","sExpires","Number","vEnd","Infinity","String","Date","toGMTString","errorHandler","msg","code","FileError","QUOTA_EXCEEDED_ERR","NOT_FOUND_ERR","SECURITY_ERR","INVALID_MODIFICATION_ERR","INVALID_STATE_ERR","localfs","requestFileSystem","webkitRequestFileSystem","FileSystem","resolveLocalFileSystemURL","webkitResolveLocalFileSystemURL","MozBlobBuilder","WebKitBlobBuilder","BlobBuilder","_fs","_isPersisted","_cwd","fs","root","readfileAsArrayBuffer","callback","errback","getFile","fileEntry","file","reader","FileReader","onloadend","readAsArrayBuffer","readfileAsDataURL","readAsDataURL","readfileAsText","readAsText","writefile","contents","folders","mkdir","createWriter","fileWriter","truncated","onwriteend","truncate","position","onerror","blob","Blob","write","rmfile","readdir","getDirectory","dirEntry","readEntries","dirReader","results","entries","concat","entry","isDirectory","createReader","folderParts","createDir","rootDir","exclusive","rmdir","removeRecursively","copy","dest","cwd","copyTo","move","moveTo","chdir","onchdir","fullPath","importFromHost","files","deferred","f","exportToHost","size","isPersisted","typ","PERSISTENT","TEMPORARY","localStorage","storage","setItem","serializeValue","defaultVal","deserializeValue","getItem","removeItem","clear","store","sessiionStorage","sessionStorage","storages","DataTransfer","_dropEffect","_effectAllowed","_data","Object","defineProperty","enumerable","configurable","keys","clearData","getData","img","offsetX","offsetY","ddt","DragDropTouch","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","addEventListener","passive","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","_this","_shouldHandle","now","_DBLCLICK","_dispatchEvent","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_getTarget","delta","_getDelta","_THRESHOLD","_createImage","_lastTarget","_moveImage","_destroyImage","defaultPrevented","touches","_dataTransfer","page","clientX","clientY","abs","pt","el","elementFromPoint","pointerEvents","parentElement","cloneNode","_copyStyle","rc","getBoundingClientRect","_OPACITY","toString","requestAnimationFrame","s","zIndex","round","_copyProps","dst","_rmvAtts","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","getContext","drawImage","cs","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dispatchEvent","hasAttribute","transforms","velm","widgets","defineWidgetClass","Widget","isHtmlNode","uniqueId","_ensureElement","tagName","$","selector","$el","find","render","_removeElement","unlistenTo","setElement","undelegateEvents","_setElement","delegateEvents","events","delegateEventSplitter","delegate","listener","uid","undelegate","_createElement","_setAttributes","i18n","message","messages","main"],"mappings":"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","file":"../skylark-utils.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils/browser',[\r\n    \"skylark-utils-dom/browser\"\r\n], function(browser) {\r\n    return browser;\r\n});\r\n\ndefine('skylark-utils/css',[\r\n    \"skylark-utils-dom/css\"\r\n], function(css) {\r\n    return css;\r\n});\r\n\ndefine('skylark-utils/datax',[\r\n    \"skylark-utils-dom/datax\"\r\n], function(datax) {\r\n    return datax;\r\n});\r\n\ndefine('skylark-utils/langx',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    return langx;\r\n});\r\n\ndefine('skylark-utils/noder',[\r\n    \"skylark-utils-dom/noder\"\r\n], function(noder) {\r\n    return noder;\r\n});\r\n\ndefine('skylark-utils/finder',[\r\n    \"skylark-utils-dom/finder\"\r\n], function(finder) {\r\n    return finder;\r\n});\r\n\ndefine('skylark-utils/geom',[\r\n    \"skylark-utils-dom/geom\"\r\n], function(geom) {\r\n    return geom;\r\n});\r\n\ndefine('skylark-utils/eventer',[\r\n    \"skylark-utils-dom/eventer\"\r\n], function(eventer) {\r\n    return eventer;\r\n});\r\n\ndefine('skylark-utils/styler',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getComputedStyle(elm, '')\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.styler = styler;\r\n});\ndefine('skylark-utils/dnd',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n        klassName: \"Draggable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this;\r\n\r\n            self.elm = elm;\r\n            self.draggingClass = params.draggingClass || \"dragging\",\r\n                self.params = langx.clone(params);\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var params = self.params;\r\n                    if (params.handle) {\r\n                        self.dragHandle = finder.closest(e.target, params.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (params.source) {\r\n                        self.dragSource = finder.closest(e.target, params.source);\r\n                    } else {\r\n                        self.dragSource = self.elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this,\r\n                draggingClass = params.draggingClass || \"dragging\",\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            self.elm = elm;\r\n            self._params = params;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n\r\n    /*   \r\n     * Make the specified element be in a moveable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function draggable(elm, params) {\r\n        return new Draggable(elm, params);\r\n    }\r\n\r\n    /*   \r\n     * Make the specified element be in a droppable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function droppable(elm, params) {\r\n        return new Droppable(elm, params);\r\n    }\r\n\r\n\r\n    function dnd() {\r\n        return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n        //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable: draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable: droppable,\r\n\r\n        manager: manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});\ndefine('skylark-utils/_devices/usermedia',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.getUserMedia = navigator.getUserMedia\r\n                        || navigator.webkitGetUserMedia\r\n                        || navigator.mozGetUserMedia\r\n                        || navigator.msGetUserMedia;\r\n   \r\n    var Deferred = langx.Deferred,\r\n        localStream  = null;\r\n\r\n    function usermedia() {\r\n        return usermedia;\r\n    }\r\n\r\n    langx.mixin(usermedia, {\r\n        isSupported : function() {\r\n            return !!navigator.getUserMedia;\r\n        },\r\n\r\n        start : function(video,audio) {\r\n\r\n            var d = new Deferred();\r\n            navigator.getUserMedia (\r\n                {video: true,audio: true},\r\n                // successCallback\r\n                function(stream) {\r\n                    localStream = stream;\r\n                    video.src = window.URL.createObjectURL(localMediaStream);\r\n                    video.onloadedmetadata = function(e) {\r\n                         // Do something with the video here.\r\n                    };\r\n                    d.resolve();\r\n                },\r\n\r\n                // errorCallback\r\n                function(err) {\r\n                  d.reject(err);\r\n                }\r\n            );\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        stop : function() {\r\n            if (localStream) {\r\n                localStream.stop();\r\n                localStream = null; \r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return  usermedia;\r\n});\r\n\ndefine('skylark-utils/_devices/vibrate',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.vibrate = navigator.vibrate\r\n                        || navigator.webkitVibrate\r\n                        || navigator.mozVibrate\r\n                        || navigator.msVibrate;\r\n    \r\n\r\n    function vibrate() {\r\n        return vibrate;\r\n    }\r\n\r\n    langx.mixin(vibrate, {\r\n        isSupported : function() {\r\n            return !!navigator.vibrate;\r\n        },\r\n\r\n        start : function(duration) {\r\n            navigator.vibrate(duration);\r\n        },\r\n\r\n        stop : function() {\r\n            navigator.vibrate(0);\r\n        }\r\n    });\r\n\r\n\r\n    return  vibrate;\r\n});\r\n\ndefine('skylark-utils/devices',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./_devices/usermedia\",\r\n    \"./_devices/vibrate\"\r\n], function(skylark,langx,usermedia,vibrate) {\r\n\r\n    function devices() {\r\n        return devices;\r\n    }\r\n\r\n    langx.mixin(devices, {\r\n        usermedia: usermedia,\r\n        vibrate : vibrate\r\n    });\r\n\r\n\r\n    return skylark.devices = devices;\r\n});\r\n\ndefine('skylark-utils/filer',[\r\n    \"skylark-utils-filer/filer\"\r\n], function(filer) {\r\n    return filer;\r\n});\ndefine('skylark-utils/fx',[\r\n    \"skylark-utils-dom/fx\"\r\n], function(fx) {\r\n    return fx;\r\n});\r\n\ndefine('skylark-utils/images',[\r\n    \"skylark-utils-dom/images\"\r\n], function(images) {\r\n    return images;\r\n});\r\n\ndefine('skylark-utils/models',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark,langx) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"init\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return skylark.models = models;\r\n});\r\n\ndefine('skylark-utils/query',[\r\n    \"skylark-utils-dom/query\"\r\n], function(query) {\r\n    return query;\r\n});\r\n\ndefine('skylark-utils/scripter',[\r\n    \"skylark-utils-dom/scripter\"\r\n], function(scripter) {\r\n    return scripter;\r\n});\r\n\ndefine('skylark-utils/_storages/cookies',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    function cookies() {\r\n        return cookies;\r\n    }\r\n\r\n    langx.mixin(cookies, {\r\n\t\tget : function(name) {\r\n\t\t    if (!sKey || !this.has(name)) { return null; }\r\n\t\t\t\treturn unescape(document.cookie.replace(new RegExp(\"(?:^|.*;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"),\"$1\"));\r\n\r\n\t\t},\r\n\r\n\t\thas : function(name) {\r\n\t\t\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie);\r\n\t\t},\r\n\r\n\r\n\t\tlist : function() {\r\n\t\t    var cookies = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\").split(/\\s*(?:\\=[^;]*)?;\\s*/);\r\n\t\t    for (var i = 0; i < cookies.length; i++) { \r\n\t\t    \tcookies[i] = unescape(cookies[i]); \r\n\t\t    }\r\n\t\t    return cookies;\r\n\t\t},\r\n\r\n\t\tremove : function(name,path) {\r\n\t\t    if (!name || !this.has(name)) { \r\n\t\t    \treturn; \r\n\t\t   \t}\r\n\t\t    document.cookie = escape(name) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" + (path ? \"; path=\" + path : \"\");\r\n\t\t},\r\n\r\n\t\tset: function (name, value, expires, path, domain, secure) {\r\n\t\t    if (!name || /^(?:expires|max\\-age|path|domain|secure)$/i.test(name)) { return; }\r\n\t\t    var sExpires = \"\";\r\n\t\t    if (expires) {\r\n\t\t      switch (expires.constructor) {\r\n\t\t        case Number:\r\n\t\t          sExpires = vEnd === Infinity ? \"; expires=Tue, 19 Jan 2038 03:14:07 GMT\" : \"; max-age=\" + expires;\r\n\t\t          break;\r\n\t\t        case String:\r\n\t\t          sExpires = \"; expires=\" + expires;\r\n\t\t          break;\r\n\t\t        case Date:\r\n\t\t          sExpires = \"; expires=\" + expires.toGMTString();\r\n\t\t          break;\r\n\t\t      }\r\n\t\t    }\r\n\t\t    document.cookie = escape(name) + \"=\" + escape(value) + sExpires + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secure ? \"; secure\" : \"\");\r\n\t\t  }\t\r\n    });\r\n\r\n\r\n    return  cookies;\r\n\r\n});\r\n\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2014/02/28\r\n */\r\ndefine('skylark-utils/_storages/localfs',[\r\n    \"../langx\"\r\n], function(langx){\r\n\tvar Deferred = langx.Deferred,\r\n\t\trequestFileSystem =  window.requestFileSystem || window.webkitRequestFileSystem,\r\n\t\tresolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL,\r\n     \tBlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;\r\n\r\n\r\n\tfunction errorHandler(e) {\r\n\t  var msg = '';\r\n\r\n\t  switch (e.code) {\r\n\t    case FileError.QUOTA_EXCEEDED_ERR:\r\n\t      msg = 'QUOTA_EXCEEDED_ERR';\r\n\t      break;\r\n\t    case FileError.NOT_FOUND_ERR:\r\n\t      msg = 'NOT_FOUND_ERR';\r\n\t      break;\r\n\t    case FileError.SECURITY_ERR:\r\n\t      msg = 'SECURITY_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_MODIFICATION_ERR:\r\n\t      msg = 'INVALID_MODIFICATION_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_STATE_ERR:\r\n\t      msg = 'INVALID_STATE_ERR';\r\n\t      break;\r\n\t    default:\r\n\t      msg = 'Unknown Error';\r\n\t      break;\r\n\t  };\r\n\r\n\t  return msg;\r\n\t}\r\n\t\r\n\tvar FileSystem = langx.Evented.inherit({\r\n\t\t_fs : null,\r\n\t\t_isPersisted : true,\r\n\t\t_cwd : null,\r\n\r\n\t\tinit:\tfunction (fs) {\r\n\t\t\tthis._fs = fs;\r\n\t\t\tthis._cwd = fs.root;\r\n\t\t},\r\n\t\t\t\r\n\r\n\t\treadfileAsArrayBuffer :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsArrayBuffer(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsDataURL :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsDataURL(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsText :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsText(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\twritefile : function (path, contents, callback,errback) {\r\n\t\t    var self = this,\r\n\t\t    \tfolders = path.split('/');\r\n\t\t    folders = folders.slice(0, folders.length - 1);\r\n\r\n\t\t    this.mkdir(folders.join('/'),function(){\r\n\t\t\t    self._cwd.getFile(path, {create: true}, function (fileEntry) {\r\n\t\t\t      fileEntry.createWriter(function (fileWriter) {\r\n\t\t\t        var truncated = false;\r\n\t\t\t        fileWriter.onwriteend = function () {\r\n\t\t\t          if (!truncated) {\r\n\t\t\t            truncated = true;\r\n\t\t\t            this.truncate(this.position);\r\n\t\t\t            return;\r\n\t\t\t          }\r\n\t\t\t          callback && callback();\r\n\t\t\t        };\r\n\t\t\t        fileWriter.onerror = errback;\r\n\t\t\t        // TODO: find a way to write as binary too\r\n\t\t\t        var blob = contents;\r\n\t\t\t        if (!blob instanceof Blob) {\r\n\t\t\t        \tblob = new Blob([contents], {type: 'text/plain'});\r\n\t\t\t        } \r\n\t\t\t        fileWriter.write(blob);\r\n\t\t\t      }, errback);\r\n\t\t\t    }, errback);\r\n\r\n\t\t    });\r\n\t\t},\r\n\r\n\t\trmfile : function (path, callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.remove(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treaddir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      var dirReader = dirEntry.createReader();\r\n\t\t      var entries = [];\r\n\t\t      readEntries();\r\n\t\t      function readEntries() {\r\n\t\t        dirReader.readEntries(function (results) {\r\n\t\t          if (!results.length) {\r\n\t\t            callback(null, entries);\r\n\t\t          }\r\n\t\t          else {\r\n\t\t            entries = entries.concat(\r\n\t\t            \tArray.prototype.slice.call(results).map(\r\n\t\t            \t\tfunction (entry) {\r\n\t\t              \t\t\treturn entry.name + (entry.isDirectory ? \"/\" : \"\");\r\n\t\t            \t\t}\r\n\t\t            \t)\r\n\t\t            );\r\n\t\t            readEntries();\r\n\t\t          }\r\n\t\t        }, errback);\r\n\t\t      }\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\tmkdir : function (path, callback,errback) {\r\n\t\t    var folderParts = path.split('/');\r\n\r\n\t\t    var createDir = function(rootDir, folders) {\r\n\t\t      // Throw out './' or '/' and move on. Prevents: '/foo/.//bar'.\r\n\t\t      if (folders[0] == '.' || folders[0] == '') {\r\n\t\t        folders = folders.slice(1);\r\n\t\t      }\r\n\r\n\t\t      if (folders.length ==0) {\r\n\t\t      \tcallback(rootDir);\r\n\t\t      \treturn;\r\n\t\t      }\r\n\t\t      rootDir.getDirectory(folders[0], {create: true, exclusive: false},\r\n\t\t        function (dirEntry) {\r\n\t\t          if (dirEntry.isDirectory) { // TODO: check shouldn't be necessary.\r\n\t\t            // Recursively add the new subfolder if we have more to create and\r\n\t\t            // There was more than one folder to create.\r\n\t\t            if (folders.length && folderParts.length != 1) {\r\n\t\t              createDir(dirEntry, folders.slice(1));\r\n\t\t            } else {\r\n\t\t              // Return the last directory that was created.\r\n\t\t              if (callback) callback(dirEntry);\r\n\t\t            }\r\n\t\t          } else {\r\n\t\t            var e = new Error(path + ' is not a directory');\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t          }\r\n\t\t        },\r\n\t\t        function(e) {\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t        }\r\n\t\t      );\r\n\t\t    };\r\n\r\n\t\t    createDir(this._cwd, folderParts);\r\n\r\n\t\t},\r\n\r\n\t\trmdir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      dirEntry.removeRecursively(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t  },\r\n\r\n\t\tcopy : function (src, dest, callback) {\r\n\t\t    // TODO: make sure works for cases where dest includes and excludes file name.\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.copyTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tmove : function(src, dest, callback) {\r\n\t\t    // TODO: handle more cases like file renames and moving/renaming directories\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.moveTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tchdir : function (path, callback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      cwd = dirEntry;\r\n\t\t      if (fs.onchdir) {\r\n\t\t        fs.onchdir(cwd.fullPath);\r\n\t\t      }\r\n\t\t      callback();\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\timportFromHost : function(files) {\r\n\t\t    // Duplicate each file the user selected to the app's fs.\r\n\t\t    var deferred = new Deferred();\r\n\t\t    for (var i = 0, file; file = files[i]; ++i) {\r\n\t\t        (function(f) {\r\n\t\t\t        cwd.getFile(file.name, {create: true, exclusive: true}, function(fileEntry) {\r\n\t\t\t          fileEntry.createWriter(function(fileWriter) {\r\n\t\t\t            fileWriter.write(f); // Note: write() can take a File or Blob object.\r\n\t\t\t          }, errorHandler);\r\n\t\t\t        }, errorHandler);\r\n\t\t     \t})(file);\r\n \t   \t \t}\r\n  \t\t    return deferred.promise;\r\n\t\t  },\r\n\r\n\t\t  exportToHost : function() {\r\n\r\n\t\t  }\r\n\t\r\n\t});\r\n\t\r\n\r\n\r\n    function localfs() {\r\n        return localfs;\r\n    }\r\n\r\n    langx.mixin(localfs, {\r\n        isSupported : function() {\r\n            return !!requestFileSystem;\r\n        },\r\n        request : function(size,isPersisted){\r\n        \tsize = size || 1024 * 1024 * 10;\r\n        \tvar typ = isPersisted ? PERSISTENT : TEMPORARY,\r\n        \t\td = new Deferred();\r\n            requestFileSystem(typ, size, function(_fs) {\r\n                var fs = new FileSystem(_fs,!!isPersisted);\r\n                d.resolve(fs);\r\n            }, function(e) {\r\n            \td.reject(e);\r\n            });\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        FileSystem : FileSystem\r\n    });\r\n    \r\n\treturn localfs;\r\n});\ndefine('skylark-utils/_storages/localStorage',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"localStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function localStorage() {\r\n        return localStorage;\r\n    }\r\n\r\n    langx.mixin(localStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, langx.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = langx.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        forEach : function(callback) {\r\n            for (var i=0; i<storage.length; i++) {\r\n                var key = storage.key(i)\r\n                callback(key, store.get(key))\r\n            }\r\n        }\r\n    });\r\n\r\n    return  localStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-utils/_storages/sessionStorage',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"sessiionStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function sessiionStorage() {\r\n        return sessiionStorage;\r\n    }\r\n\r\n    langx.mixin(sessiionStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, langx.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = langx.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        forEach : function(callback) {\r\n            for (var i=0; i<storage.length; i++) {\r\n                var key = storage.key(i)\r\n                callback(key, store.get(key))\r\n            }\r\n        }\r\n    });\r\n\r\n    return  sessiionStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-utils/storages',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./_storages/cookies\",\r\n    \"./_storages/localfs\",\r\n    \"./_storages/localStorage\",\r\n    \"./_storages/sessionStorage\"\r\n], function(skylark,langx,cookies,localfs,localStorage,sessionStorage) {\r\n    function storages() {\r\n        return storages;\r\n    }\r\n\r\n    langx.mixin(storages, {\r\n        cookies: cookies,\r\n        localfs : localfs,\r\n        localStorage : localStorage,\r\n        sessionStorage : sessionStorage\r\n    });\r\n\r\n\r\n    return skylark.storages = storages;\r\n});\r\n\ndefine('skylark-utils/touchx',[], function() {\r\n\r\n    //The following code is borrow from DragDropTouch (https://github.com/Bernardo-Castilho/dragdroptouch)\r\n\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function() {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function() {\r\n                return this._dropEffect;\r\n            },\r\n            set: function(value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function() {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function(value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function() {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function(type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            } else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function(type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function(type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function(img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function() {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', null, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if ('ontouchstart' in document) {\r\n                var d = document,\r\n                    ts = this._touchstart.bind(this),\r\n                    tm = this._touchmove.bind(this),\r\n                    te = this._touchend.bind(this),\r\n                    opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function() {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function(e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function() {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img) {\r\n                    var delta = this._getDelta(e);\r\n                    if (delta > DragDropTouch._THRESHOLD) {\r\n                        this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                        this._createImage(e);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                    }\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function(e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function() {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._dataTransfer = new DataTransfer();\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function(e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function(e) {\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function(e) {\r\n            var pt = this._getPoint(e),\r\n                el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function(e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(),\r\n                    pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function() {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function(e) {\r\n            var _this = this;\r\n            if (this._img) {\r\n                requestAnimationFrame(function() {\r\n                    var pt = _this._getPoint(e, true),\r\n                        s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                });\r\n            }\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function(dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function(src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function(att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src,\r\n                    cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function(e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'),\r\n                    t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function(e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n\r\n    /*private*/\r\n    DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\r\n\r\n    return DragDropTouch;\r\n});\r\n\ndefine('skylark-utils/transforms',[\r\n    \"skylark-utils-dom/transforms\"\r\n], function(transforms) {\r\n    return transforms;\r\n});\r\n\ndefine('skylark-utils/velm',[\r\n    \"skylark-utils-dom/velm\"\r\n], function(velm) {\r\n    return velm;\r\n});\r\n\ndefine('skylark-utils/widgets',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./styler\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./query\",\r\n    \"./velm\"\r\n], function(skylark,langx,noder, datax, styler, geom, eventer,query,velm) {\r\n\tfunction widgets() {\r\n\t    return widgets;\r\n\t}\r\n\r\n\tvar Widget = langx.Evented.inherit({\r\n\t    init :function(el,options) {\r\n\t    \t//for supporting init(options,el)\r\n\t        if (langx.isHtmlNode(options)) {\r\n\t        \tvar _t = el,\r\n\t        \t\toptions = el;\r\n\t            el = options;\r\n\t        }\r\n\t        if (langx.isHtmlNode(el)) { \r\n\t        \tthis.el = el;\r\n\t    \t} else {\r\n\t    \t\tthis.el = null;\r\n\t    \t}\r\n\t        if (options) {\r\n\t            langx.mixin(this,options);\r\n\t        }\r\n\t        if (!this.cid) {\r\n\t            this.cid = langx.uniqueId('w');\r\n\t        }\r\n\t        this._ensureElement();\r\n\t    },\r\n\r\n\t    // The default `tagName` of a View's element is `\"div\"`.\r\n\t    tagName: 'div',\r\n\r\n\t    // query delegate for element lookup, scoped to DOM elements within the\r\n\t    // current view. This should be preferred to global lookups where possible.\r\n\t    $: function(selector) {\r\n\t      return this.$el.find(selector);\r\n\t    },\r\n\r\n\t    // **render** is the core function that your view should override, in order\r\n\t    // to populate its element (`this.el`), with the appropriate HTML. The\r\n\t    // convention is for **render** to always return `this`.\r\n\t    render: function() {\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view by taking the element out of the DOM, and removing any\r\n\t    // applicable Backbone.Events listeners.\r\n\t    remove: function() {\r\n\t      this._removeElement();\r\n\t      this.unlistenTo();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view's element from the document and all event listeners\r\n\t    // attached to it. Exposed for subclasses using an alternative DOM\r\n\t    // manipulation API.\r\n\t    _removeElement: function() {\r\n\t      this.$el.remove();\r\n\t    },\r\n\r\n\t    // Change the view's element (`this.el` property) and re-delegate the\r\n\t    // view's events on the new element.\r\n\t    setElement: function(element) {\r\n\t      this.undelegateEvents();\r\n\t      this._setElement(element);\r\n\t      this.delegateEvents();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Creates the `this.el` and `this.$el` references for this view using the\r\n\t    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\r\n\t    // context or an element. Subclasses can override this to utilize an\r\n\t    // alternative DOM manipulation API and are only required to set the\r\n\t    // `this.el` property.\r\n\t    _setElement: function(el) {\r\n\t      this.$el = widgets.$(el);\r\n\t      this.el = this.$el[0];\r\n\t    },\r\n\r\n\t    // Set callbacks, where `this.events` is a hash of\r\n\t    //\r\n\t    // *{\"event selector\": \"callback\"}*\r\n\t    //\r\n\t    //     {\r\n\t    //       'mousedown .title':  'edit',\r\n\t    //       'click .button':     'save',\r\n\t    //       'click .open':       function(e) { ... }\r\n\t    //     }\r\n\t    //\r\n\t    // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n\t    // Uses event delegation for efficiency.\r\n\t    // Omitting the selector binds the event to `this.el`.\r\n\t    delegateEvents: function(events) {\r\n\t      events || (events = langx.result(this, 'events'));\r\n\t      if (!events) return this;\r\n\t      this.undelegateEvents();\r\n\t      for (var key in events) {\r\n\t        var method = events[key];\r\n\t        if (!langx.isFunction(method)) method = this[method];\r\n\t        if (!method) continue;\r\n\t        var match = key.match(delegateEventSplitter);\r\n\t        this.delegate(match[1], match[2], langx.proxy(method, this));\r\n\t      }\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Add a single event listener to the view's element (or a child element\r\n\t    // using `selector`). This only works for delegate-able events: not `focus`,\r\n\t    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\r\n\t    delegate: function(eventName, selector, listener) {\r\n\t      this.$el.on(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Clears all callbacks previously bound to the view by `delegateEvents`.\r\n\t    // You usually don't need to use this, but may wish to if you have multiple\r\n\t    // Backbone views attached to the same DOM element.\r\n\t    undelegateEvents: function() {\r\n\t      if (this.$el) this.$el.off('.delegateEvents' + this.uid);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // A finer-grained `undelegateEvents` for removing a single delegated event.\r\n\t    // `selector` and `listener` are both optional.\r\n\t    undelegate: function(eventName, selector, listener) {\r\n\t      this.$el.off(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Produces a DOM element to be assigned to your view. Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _createElement: function(tagName,attrs) {\r\n\t      return noder.createElement(tagName,attrs);\r\n\t    },\r\n\r\n\t    // Ensure that the View has a DOM element to render into.\r\n\t    // If `this.el` is a string, pass it through `$()`, take the first\r\n\t    // matching element, and re-assign it to `el`. Otherwise, create\r\n\t    // an element from the `id`, `className` and `tagName` properties.\r\n\t    _ensureElement: function() {\r\n\t      if (!this.el) {\r\n\t        var attrs = langx.mixin({}, langx.result(this, 'attributes'));\r\n\t        if (this.id) attrs.id = langx.result(this, 'id');\r\n\t        if (this.className) attrs['class'] = langx.result(this, 'className');\r\n\t        this.setElement(this._createElement(langx.result(this, 'tagName'),attrs));\r\n\t        this._setAttributes(attrs);\r\n\t      } else {\r\n\t        this.setElement(langx.result(this, 'el'));\r\n\t      }\r\n\t    },\r\n\r\n\t    // Set attributes from a hash on this view's element.  Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _setAttributes: function(attributes) {\r\n\t      this.$el.attr(attributes);\r\n\t    },\r\n\r\n\t    // Translation function, gets the message key to be translated\r\n\t    // and an object with context specific data as arguments:\r\n\t    i18n: function (message, context) {\r\n\t        message = (this.messages && this.messages[message]) || message.toString();\r\n\t        if (context) {\r\n\t            langx.each(context, function (key, value) {\r\n\t                message = message.replace('{' + key + '}', value);\r\n\t            });\r\n\t        }\r\n\t        return message;\r\n\t    },\r\n\r\n\t\t});\r\n\r\n\tfunction defineWidgetClass(name,base,prototype) {\r\n\r\n\t};\r\n\r\n\tlangx.mixin(widgets, {\r\n\t\t$ : query,\r\n\r\n\t\tdefine : defineWidgetClass,\r\n\t\tWidget : Widget\r\n\t});\r\n\r\n\r\n\treturn skylark.widgets = widgets;\r\n});\r\n\ndefine('skylark-utils/main',[\r\n    \"./skylark\",\r\n    \"./browser\",\r\n    \"./css\",\r\n    \"./datax\",\r\n    \"./dnd\",\r\n    \"./devices\",\r\n    \"./eventer\",\r\n    \"./filer\",\r\n    \"./finder\",\r\n    \"./fx\",\r\n    \"./geom\",\r\n    \"./images\",\r\n    \"./models\",\r\n    \"./noder\",\r\n    \"./query\",\r\n    \"./scripter\",\r\n    \"./storages\",\r\n    \"./styler\",\r\n    \"./touchx\",\r\n    \"./transforms\",\r\n    \"./langx\",\r\n    \"./velm\",\r\n    \"./widgets\"\r\n], function(skylark) {\r\n    return skylark;\r\n})\r\n;\ndefine('skylark-utils', ['skylark-utils/main'], function (main) { return main; });\n\n"]}