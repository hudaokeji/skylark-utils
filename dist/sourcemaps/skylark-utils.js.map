{"version":3,"sources":["skylark-utils.js"],"names":["define","skylark","browser","css","datax","langx","noder","finder","geom","eventer","Array","prototype","every","forEach","camelCase","dasherize","maybeAddPx","name","value","cssNumber","column-count","columns","font-weight","line-height","opacity","z-index","zoom","classReCache","classRE","RegExp","className","node","klass","svg","undefined","baseVal","elementDisplay","styler","mixin","autocssfix","cssHooks","addClass","elm","this","names","cls","isString","split","re","match","property","arguments","length","computedStyle","getComputedStyle","style","getPropertyValue","isArrayLike","props","call","prop","removeProperty","key","cssText","disabled","dom","hasClass","hide","isInvisible","removeClass","replace","trim","show","nodeName","element","display","document","createElement","body","appendChild","parentNode","removeChild","defaultDisplay","toggleClass","when","self","on","off","attr","removeAttr","pagePosition","height","DndManager","Evented","inherit","klassName","init","prepare","draggable","e","create","dragSource","dragHandle","trigger","start","event","p","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","manager","Draggable","params","clone","eventName","isFunction","mousedown","handle","closest","target","source","mouseup","dragstart","dragend","stop","Droppable","hoverClass","activeClass","acceptable","_params","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","dnd","droppable","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Deferred","localStream","usermedia","isSupported","video","audio","d","stream","src","window","URL","createObjectURL","localMediaStream","onloadedmetadata","resolve","err","reject","promise","vibrate","webkitVibrate","mozVibrate","msVibrate","duration","devices","filer","fx","images","methodMap","update","patch","delete","read","Entity","Stateful","sync","models","apply","matches","attrs","isMatch","attributes","fetch","options","entity","success","parse","resp","serverAttrs","set","context","wrapError","save","val","wait","validate","_validate","method","isNew","xhr","destroy","stopListening","collection","defer","url","base","result","urlError","id","get","idAttribute","encodeURIComponent","Collection","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","i","tail","partial","initialize","toJSON","map","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","push","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","pop","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","Error","proxy","sortBy","pluck","callbackOpts","constructor","validationError","indexOf","_onEntityEvent","prevId","previousAttributes","emulateHTTP","emulateJSON","type","defaults","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","error","textStatus","errorThrown","Xhr","request","query","scripter","storages","DataTransfer","_dropEffect","_effectAllowed","_data","Object","defineProperty","enumerable","configurable","keys","clearData","getData","img","offsetX","offsetY","ddt","DragDropTouch","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","addEventListener","passive","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_getTarget","delta","_getDelta","_THRESHOLD","_createImage","_lastTarget","_moveImage","_destroyImage","defaultPrevented","touches","_dataTransfer","page","clientX","clientY","abs","pt","el","elementFromPoint","pointerEvents","parentElement","cloneNode","_copyStyle","rc","getBoundingClientRect","_OPACITY","toString","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","_rmvAtts","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","getContext","drawImage","cs","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dispatchEvent","hasAttribute","transforms","elmx","widgets","Widget","isHtmlNode","uniqueId","_ensureElement","tagName","$","selector","$el","find","render","_removeElement","unlistenTo","setElement","undelegateEvents","_setElement","delegateEvents","events","delegateEventSplitter","delegate","listener","uid","undelegate","_createElement","_setAttributes","i18n","message","messages","main"],"mappings":";;;;;;;2vBAAAA,EAAA,yBAAA,yBAAA,SAAAC,GACA,OAAAA,IAGAD,EAAA,yBACA,6BACA,SAAAE,GACA,OAAAA,IAGAF,EAAA,qBACA,yBACA,SAAAG,GACA,OAAAA,IAGAH,EAAA,uBACA,2BACA,SAAAI,GACA,OAAAA,IAGAJ,EAAA,uBACA,uBACA,SAAAK,GACA,OAAAA,IAGAL,EAAA,uBACA,2BACA,SAAAM,GACA,OAAAA,IAGAN,EAAA,wBACA,4BACA,SAAAO,GACA,OAAAA,IAGAP,EAAA,sBACA,0BACA,SAAAQ,GACA,OAAAA,IAGAR,EAAA,yBACA,6BACA,SAAAS,GACA,OAAAA,IAGAT,EAAA,wBACA,YACA,WACA,SAAAC,EAAAI,GACAK,MAAAC,UAAAC,MAAA,IACAC,EAAAH,MAAAC,UAAAE,QACAC,EAAAT,EAAAS,UACAC,EAAAV,EAAAU,UAEA,SAAAC,EAAAC,EAAAC,GACA,MAAA,iBAAAA,GAAAC,EAAAJ,EAAAE,IAAAC,EAAAA,EAAA,KAGA,IAAAC,GACAC,eAAA,EACAC,QAAA,EACAC,cAAA,EACAC,cAAA,EACAC,QAAA,EACAC,UAAA,EACAC,KAAA,GAEAC,KAvEA,SAAAC,EAAAX,GACA,OAAAA,KAAAU,EACAA,EAAAV,GAAAU,EAAAV,GAAA,IAAAY,OAAA,UAAAZ,EAAA,WASA,SAAAa,EAAAC,EAAAb,GACA,IAAAc,EAAAD,EAAAD,WAAA,GACAG,EAAAD,QAAAE,IAAAF,EAAAG,QAEA,QAAAD,IAAAhB,EAAA,OAAAe,EAAAD,EAAAG,QAAAH,EACAC,EAAAD,EAAAG,QAAAjB,EAAAa,EAAAD,UAAAZ,EAaA,IAAAkB,KA4KA,IAAAC,EAAA,WACA,OAAAA,GAqBA,OAlBAhC,EAAAiC,MAAAD,GACAE,YAAA,EACAC,YAIAC,SA1IA,SAAAC,EAAAzB,GACA,IAAAA,EAAA,OAAA0B,KACA,IACAC,EADAC,EAAAf,EAAAY,GAGAE,EADAvC,EAAAyC,SAAA7B,GACAA,EAAA8B,MAAA,QAEA9B,EAWA,OATA2B,EAAA/B,QAAA,SAAAmB,GACA,IAAAgB,EAAApB,EAAAI,GACAa,EAAAI,MAAAD,KACAH,IAAAA,EAAA,IAAA,IAAAb,KAIAF,EAAAY,EAAAG,GAEAF,MAyHAb,UAAAA,EACA3B,IAlHA,SAAAuC,EAAAQ,EAAAhC,GACA,GAAAiC,UAAAC,OAAA,EAAA,CACA,IACAC,EAAAC,iBAAAZ,EAAA,IACA,GAAArC,EAAAyC,SAAAI,GACA,OAAAR,EAAAa,MAAAzC,EAAAoC,KAAAG,EAAAG,iBAAAzC,EAAAmC,IACA,GAAA7C,EAAAoD,YAAAP,GAAA,CACA,IAAAQ,KAIA,OAHA7C,EAAA8C,KAAAT,EAAA,SAAAU,GACAF,EAAAE,GAAAlB,EAAAa,MAAAzC,EAAA8C,KAAAP,EAAAG,iBAAAzC,EAAA6C,MAEAF,GAIA,IAAAvD,EAAA,GACA,GAAA,iBAAA,EACAe,GAAA,IAAAA,EAGAf,EAAAY,EAAAmC,GAAA,IAAAlC,EAAAkC,EAAAhC,GAFAwB,EAAAa,MAAAM,eAAA9C,EAAAmC,SAKA,IAAAY,OAAAZ,OACAhB,IAAAgB,EAAAY,OAGAZ,EAAAY,MAAA,IAAAZ,EAAAY,KAGA3D,GAAAY,EAAA+C,KAAA,IAAA9C,EAAA8C,IAAAZ,EAAAY,MAAA,IAFApB,EAAAa,MAAAM,eAAA9C,EAAA+C,OAQA,OADApB,EAAAa,MAAAQ,SAAA,IAAA5D,EACAwC,MA+EAqB,SAnMA,SAAAtB,EAAAxB,GACA,GAAAiC,UAAAC,OAAA,EACA,QAAAT,KAAAsB,IAAAD,SAKA,OAFAtB,EAAAsB,SAAA9C,EAEAyB,MA6LAuB,SAxEA,SAAAxB,EAAAzB,GACA,IAAA+B,EAAApB,EAAAX,GACA,OAAAyB,EAAAZ,WAAAY,EAAAZ,UAAAmB,MAAAD,IAuEAmB,KAzJA,SAAAzB,GAEA,OADAL,EAAAlC,IAAAuC,EAAA,UAAA,QACAC,MAwJAyB,YAlKA,SAAA1B,GACA,MAAA,QAAAL,EAAAlC,IAAAuC,EAAA,YAAA,GAAAL,EAAAlC,IAAAuC,EAAA,YAkKA2B,YAjEA,SAAA3B,EAAAzB,GACA,GAAAA,EAAA,CACA,IAAA4B,EAAAf,EAAAY,IAGArC,EAAAyC,SAAA7B,GACAA,EAAA8B,MAAA,QAEA9B,GAGAJ,QAAA,SAAAmB,GACA,IAAAgB,EAAApB,EAAAI,GACAa,EAAAI,MAAAD,KACAH,EAAAA,EAAAyB,QAAAtB,EAAA,QAIAlB,EAAAY,EAAAG,EAAA0B,aAEAzC,EAAAY,EAAA,IAGA,OAAAC,MA2CA6B,KA5KA,SAAA9B,GACAL,EAAAlC,IAAAuC,EAAA,UAAA,IACA,QAAAL,EAAAlC,IAAAuC,EAAA,YACAL,EAAAlC,IAAAuC,EAAA,UAnBA,SAAA+B,GACA,IAAAC,EAAAC,EACAvC,EAAAqC,KACAC,EAAAE,SAAAC,cAAAJ,GACAG,SAAAE,KAAAC,YAAAL,GACAC,EAAArB,iBAAAoB,EAAA,IAAAlB,iBAAA,WACAkB,EAAAM,WAAAC,YAAAP,GACA,QAAAC,IAAAA,EAAA,SACAvC,EAAAqC,GAAAE,GAEA,OAAAvC,EAAAqC,GASAS,CAAAxC,EAAA+B,WAEA,OAAA9B,MAwKAwC,YAnCA,SAAAzC,EAAAzB,EAAAmE,GACA,IAAAC,EAAA1C,KAYA,OAXA1B,EAAA8B,MAAA,QAAAlC,QAAA,SAAAmB,QACAE,IAAAkD,IACAA,GAAAC,EAAAnB,SAAAxB,EAAAV,IAEAoD,EACAC,EAAA5C,SAAAC,EAAAV,GAEAqD,EAAAhB,YAAA3B,EAAAV,KAIAqD,KAyBApF,EAAAoC,OAAAA,IAEArC,EAAA,qBACA,YACA,UACA,UACA,UACA,WACA,SACA,YACA,YACA,SAAAC,EAAAI,EAAAC,EAAAF,EAAAG,EAAAC,EAAAC,EAAA4B,GACA5B,EAAA6E,GACA7E,EAAA8E,IACAnF,EAAAoF,KACApF,EAAAqF,WACAjF,EAAAkF,aACArD,EAAAI,SACAjC,EAAAmF,OANA,IASAC,EAAAvF,EAAAwF,QAAAC,SACAC,UAAA,aAEAC,KAAA,aAIAC,QAAA,SAAAC,GACA,IAAAC,EAAA1F,EAAA2F,OAAA,aACAC,WAAAH,EAAAG,WACAC,WAAAJ,EAAAI,aAEAJ,EAAAK,QAAAJ,GACAD,EAAAG,WAAAF,EAAAE,YAGAG,MAAA,SAAAN,EAAAO,GAEA,IAAAC,EAAAlG,EAAAkF,aAAAQ,EAAAG,YACA1D,KAAAgE,gBAAAC,SAAAH,EAAAI,MAAAH,EAAAI,MACAnE,KAAAoE,gBAAAH,SAAAH,EAAAO,MAAAN,EAAAO,KAEA,IAAAd,EAAA1F,EAAA2F,OAAA,WACA1D,IAAAwD,EAAAxD,IACA2D,WAAAH,EAAAG,WACAC,WAAAJ,EAAAI,WACAY,MAAA,KAEAC,cAGAjB,EAAAK,QAAAJ,GAGAxD,KAAAyE,SAAAlB,EAEAA,EAAAmB,eACAhF,EAAAI,SAAAyD,EAAAG,WAAAH,EAAAmB,eAGA1E,KAAA2E,cAAAnB,EAAAe,MACAvE,KAAA2E,gBACA3E,KAAA2E,cAAApB,EAAAxD,KAGAC,KAAA4E,iBAAApB,EAAAgB,SACAxE,KAAA4E,kBAEAlH,EAAAmH,KAAA7E,KAAA4E,iBAAA,SAAAzD,EAAA5C,GACAuF,EAAAgB,aAAAC,QAAA5D,EAAA5C,KAIAuF,EAAAgB,aAAAE,aAAAhF,KAAA2E,cAAA3E,KAAAgE,gBAAAhE,KAAAoE,iBAEAN,EAAAgB,aAAAG,cAAA,WAEA,IAAAC,EAAApH,EAAA2F,OAAA,cACA1D,IAAAyD,EAAAzD,IACA2D,WAAAF,EAAAE,WACAC,WAAAH,EAAAG,WACAY,MAAAf,EAAAe,MACAC,SAAAhB,EAAAgB,WAGAxE,KAAA4D,QAAAsB,IAGAC,KAAA,aAIAC,IAAA,SAAAC,GACA,IAAAZ,EAAAzE,KAAAyE,SACAA,GACAA,EAAAC,eACAhF,EAAAgC,YAAA+C,EAAAf,WAAAe,EAAAC,eAIA,IAAAlB,EAAA1F,EAAA2F,OAAA,eACAzD,KAAA4D,QAAAJ,GAGAxD,KAAAyE,SAAA,KACAzE,KAAA4E,iBAAA,KACA5E,KAAA2E,cAAA,KACA3E,KAAAgE,gBAAA,KACAhE,KAAAoE,gBAAA,QAIAkB,EAAA,IAAArC,EAMAsC,EAAA7H,EAAAwF,QAAAC,SACAC,UAAA,YAEAC,KAAA,SAAAtD,EAAAyF,GACA,IAAA9C,EAAA1C,KAEA0C,EAAA3C,IAAAA,EACA2C,EAAAgC,cAAAc,EAAAd,eAAA,WACAhC,EAAA8C,OAAA9H,EAAA+H,MAAAD,IAEA,YAAA,UAAA,QAAA,UAAAtH,QAAA,SAAAwH,GACAhI,EAAAiI,WAAAH,EAAAE,KACAhD,EAAAC,GAAA+C,EAAAF,EAAAE,MAKA5H,EAAA6E,GAAA5C,GACA6F,UAAA,SAAApC,GACA,IAAAgC,EAAA9C,EAAA8C,OACAA,EAAAK,SACAnD,EAAAiB,WAAA/F,EAAAkI,QAAAtC,EAAAuC,OAAAP,EAAAK,SACAnD,EAAAiB,cAIA6B,EAAAQ,OACAtD,EAAAgB,WAAA9F,EAAAkI,QAAAtC,EAAAuC,OAAAP,EAAAQ,QAEAtD,EAAAgB,WAAAhB,EAAA3C,IAEAuF,EAAAhC,QAAAZ,GACAA,EAAAgB,YACAjG,EAAAoF,KAAAH,EAAAgB,WAAA,YAAA,UAIAuC,QAAA,SAAAzC,GACAd,EAAAgB,aAEAhB,EAAAgB,WAAA,KACAhB,EAAAiB,WAAA,OAIAuC,UAAA,SAAA1C,GACA/F,EAAAoF,KAAAH,EAAAgB,WAAA,YAAA,SACA4B,EAAAzB,MAAAnB,EAAAc,IAGA2C,QAAA,SAAA3C,GACA1F,EAAAsI,KAAA5C,GAEA8B,EAAAb,UAIAa,EAAAF,KAAA,SASAiB,EAAA3I,EAAAwF,QAAAC,SACAC,UAAA,YAEAC,KAAA,SAAAtD,EAAAyF,GACA,IAEAc,EACAC,EAHA7D,EAAA1C,KAIAwG,GAHAhB,EAAAd,eAGA,GAEAhC,EAAA3C,IAAAA,EACA2C,EAAA+D,QAAAjB,GAEA,UAAA,UAAA,SAAA,UAAA,WAAAtH,QAAA,SAAAwH,GACAhI,EAAAiI,WAAAH,EAAAE,KACAhD,EAAAC,GAAA+C,EAAAF,EAAAE,MAIA5H,EAAA6E,GAAA5C,GACA2G,SAAA,SAAAlD,GAGA,GAFAA,EAAAmD,kBAEAH,EAAA,CAIA,IAAAI,EAAA9I,EAAA2F,OAAA,WACAoD,QAAArD,EAAAuC,OACAvB,SAAAc,EAAAV,iBACA4B,YAAA,IAEA9D,EAAAkB,QAAAgD,GAEAA,EAAAJ,aACAhD,EAAAsD,iBAEAtD,EAAAsB,aAAAiC,WAAA,cAKAC,UAAA,SAAAxD,GACAd,EAAA+D,QAAA,IACA1G,EAAA2C,EAAA3C,IAEA6G,EAAA9I,EAAA2F,OAAA,WACAe,SAAAc,EAAAV,mBAGAlC,EAAAkB,QAAAgD,GAEApD,EAAAmD,kBAEAL,GAAAE,GACA9G,EAAAI,SAAAC,EAAAuG,IAIAW,UAAA,SAAAzD,GACAd,EAAA+D,QAAA,IACA1G,EAAA2C,EAAA3C,IACA,IAAAyG,EAAA,OAAA,EAEA,IAAAI,EAAA9I,EAAA2F,OAAA,UACAe,SAAAc,EAAAV,mBAGAlC,EAAAkB,QAAAgD,GAEApD,EAAAmD,kBAEAL,GAAAE,GACA9G,EAAAgC,YAAA3B,EAAAuG,IAIAY,KAAA,SAAA1D,GACAd,EAAA+D,QAAA,IACA1G,EAAA2C,EAAA3C,IAIA,GAFAjC,EAAAsI,KAAA5C,GAEA8B,EAAAb,SAAA,CAIA6B,GAAAE,GACA9G,EAAAI,SAAAC,EAAAuG,GAGA,IAAAM,EAAA9I,EAAA2F,OAAA,WACAe,SAAAc,EAAAV,mBAGAlC,EAAAkB,QAAAgD,GAEAtB,EAAAF,KAAA,OAIAE,EAAA3C,GAAA,aAAA,SAAAa,GACA,IAAAoD,EAAA9I,EAAA2F,OAAA,WACAe,SAAAc,EAAAV,iBACA4B,YAAA,IAGA9D,EAAAkB,QAAAgD,GAEAJ,EAAAI,EAAAJ,WACAF,EAAAM,EAAAN,YACAC,EAAAK,EAAAL,cAEAC,GACA9G,EAAAI,SAAAC,EAAAwG,KAGA5D,GAAA,WAAA,SAAAa,GACA,IAAAoD,EAAA9I,EAAA2F,OAAA,SACAe,SAAAc,EAAAV,iBACA4B,YAAA,IAGA9D,EAAAkB,QAAAgD,GAEAN,GAAAE,GACA9G,EAAAgC,YAAA3B,EAAAuG,GAEAC,GAAAC,GACA9G,EAAAgC,YAAA3B,EAAAwG,GAGAC,GAAA,EACAD,EAAA,KACAD,EAAA,UA0BA,SAAAa,IACA,OAAAA,EAmCA,OAhCAzJ,EAAAiC,MAAAwH,GAgBA5D,UAlCA,SAAAxD,EAAAyF,GACA,OAAA,IAAAD,EAAAxF,EAAAyF,IA0CA4B,UAlCA,SAAArH,EAAAyF,GACA,OAAA,IAAAa,EAAAtG,EAAAyF,IAmCAF,QAAAA,IAKAhI,EAAA6J,IAAAA,IAEA9J,EAAA,oCACA,YACA,SAAAK,GACA2J,UAAAC,aAAAD,UAAAC,cACAD,UAAAE,oBACAF,UAAAG,iBACAH,UAAAI,eAEA,IAAAC,EAAAhK,EAAAgK,SACAC,EAAA,KAEA,SAAAC,IACA,OAAAA,EAyCA,OAtCAlK,EAAAiC,MAAAiI,GACAC,YAAA,WACA,QAAAR,UAAAC,cAGAzD,MAAA,SAAAiE,EAAAC,GAEA,IAAAC,EAAA,IAAAN,EAmBA,OAlBAL,UAAAC,cACAQ,OAAA,EAAAC,OAAA,GAEA,SAAAE,GACAN,EAAAM,EACAH,EAAAI,IAAAC,OAAAC,IAAAC,gBAAAC,kBACAR,EAAAS,iBAAA,SAAA/E,KAGAwE,EAAAQ,WAIA,SAAAC,GACAT,EAAAU,OAAAD,KAIAT,EAAAW,SAGAvC,KAAA,WACAuB,IACAA,EAAAvB,OACAuB,EAAA,SAMAC,IAGAvK,EAAA,kCACA,YACA,SAAAK,GAOA,SAAAkL,IACA,OAAAA,EAkBA,OAzBAvB,UAAAuB,QAAAvB,UAAAuB,SACAvB,UAAAwB,eACAxB,UAAAyB,YACAzB,UAAA0B,UAOArL,EAAAiC,MAAAiJ,GACAf,YAAA,WACA,QAAAR,UAAAuB,SAGA/E,MAAA,SAAAmF,GACA3B,UAAAuB,QAAAI,IAGA5C,KAAA,WACAiB,UAAAuB,QAAA,MAKAA,IAGAvL,EAAA,yBACA,YACA,UACA,uBACA,sBACA,SAAAC,EAAAI,EAAAkK,EAAAgB,GAEA,SAAAK,IACA,OAAAA,EASA,OANAvL,EAAAiC,MAAAsJ,GACArB,UAAAA,EACAgB,QAAAA,IAIAtL,EAAA2L,QAAAA,IAGA5L,EAAA,uBACA,6BACA,SAAA6L,GACA,OAAAA,IAEA7L,EAAA,oBACA,wBACA,SAAA8L,GACA,OAAAA,IAGA9L,EAAA,wBACA,4BACA,SAAA+L,GACA,OAAAA,IAGA/L,EAAA,wBACA,YACA,WACA,SAAAC,EAAAI,GAGA,IAAA2L,GACA5F,OAAA,OACA6F,OAAA,MACAC,MAAA,QACAC,OAAA,SACAC,KAAA,OAiEAC,EAAAhM,EAAAiM,SAAAxG,SACAyG,KAAA,WACA,OAAAC,EAAAD,KAAAE,MAAA9J,KAAAQ,YASAuJ,QAAA,SAAAC,GACA,OAAAtM,EAAAuM,QAAAjK,KAAAkK,WAAAF,IAKAG,MAAA,SAAAC,GAEA,IAAAC,EAAArK,KACAsK,GAFAF,EAAA1M,EAAAiC,OAAA4K,OAAA,GAAAH,IAEAE,QAQA,OAPAF,EAAAE,QAAA,SAAAE,GACA,IAAAC,EAAAL,EAAAG,MAAAF,EAAAE,MAAAC,EAAAJ,GAAAI,EACA,IAAAH,EAAAK,IAAAD,EAAAL,GAAA,OAAA,EACAE,GAAAA,EAAAtJ,KAAAoJ,EAAAO,QAAAN,EAAAG,EAAAJ,GACAC,EAAAzG,QAAA,OAAAyG,EAAAG,EAAAJ,IAEAQ,UAAA5K,KAAAoK,GACApK,KAAA4J,KAAA,OAAA5J,KAAAoK,IAMAS,KAAA,SAAA1J,EAAA2J,EAAAV,GAEA,IAAAJ,EACA,MAAA7I,GAAA,iBAAAA,GACA6I,EAAA7I,EACAiJ,EAAAU,IAEAd,MAAA7I,GAAA2J,EAIA,IAAAC,GADAX,EAAA1M,EAAAiC,OAAAqL,UAAA,EAAAT,OAAA,GAAAH,IACAW,KAKA,GAAAf,IAAAe,GACA,IAAA/K,KAAA0K,IAAAV,EAAAI,GAAA,OAAA,OACA,IAAApK,KAAAiL,UAAAjB,EAAAI,GACA,OAAA,EAKA,IAAAC,EAAArK,KACAsK,EAAAF,EAAAE,QACAJ,EAAAlK,KAAAkK,WACAE,EAAAE,QAAA,SAAAE,GAEAH,EAAAH,WAAAA,EACA,IAAAO,EAAAL,EAAAG,MAAAF,EAAAE,MAAAC,EAAAJ,GAAAI,EAEA,GADAO,IAAAN,EAAA/M,EAAAiC,SAAAqK,EAAAS,IACAA,IAAAJ,EAAAK,IAAAD,EAAAL,GAAA,OAAA,EACAE,GAAAA,EAAAtJ,KAAAoJ,EAAAO,QAAAN,EAAAG,EAAAJ,GACAC,EAAAzG,QAAA,OAAAyG,EAAAG,EAAAJ,IAEAQ,UAAA5K,KAAAoK,GAGAJ,GAAAe,IAAA/K,KAAAkK,WAAAxM,EAAAiC,SAAAuK,EAAAF,IAEA,IAAAkB,EAAAlL,KAAAmL,QAAA,SAAAf,EAAAb,MAAA,QAAA,SACA,UAAA2B,GAAAd,EAAAJ,QAAAI,EAAAJ,MAAAA,GACA,IAAAoB,EAAApL,KAAA4J,KAAAsB,EAAAlL,KAAAoK,GAKA,OAFApK,KAAAkK,WAAAA,EAEAkB,GAMAC,QAAA,SAAAjB,GAEA,IAAAC,EAAArK,KACAsK,GAFAF,EAAAA,EAAA1M,EAAA+H,MAAA2E,OAEAE,QACAS,EAAAX,EAAAW,KAEAM,EAAA,WACAhB,EAAAiB,gBACAjB,EAAAzG,QAAA,UAAAyG,EAAAA,EAAAkB,WAAAnB,IAGAA,EAAAE,QAAA,SAAAE,GACAO,GAAAM,IACAf,GAAAA,EAAAtJ,KAAAoJ,EAAAO,QAAAN,EAAAG,EAAAJ,GACAC,EAAAc,SAAAd,EAAAzG,QAAA,OAAAyG,EAAAG,EAAAJ,IAGA,IAAAgB,GAAA,EAQA,OAPApL,KAAAmL,QACAzN,EAAA8N,MAAApB,EAAAE,UAEAM,UAAA5K,KAAAoK,GACAgB,EAAApL,KAAA4J,KAAA,SAAA5J,KAAAoK,IAEAW,GAAAM,IACAD,GAMAK,IAAA,WACA,IAAAC,EACAhO,EAAAiO,OAAA3L,KAAA,YACAtC,EAAAiO,OAAA3L,KAAAuL,WAAA,QACAK,WACA,GAAA5L,KAAAmL,QAAA,OAAAO,EACA,IAAAG,EAAA7L,KAAA8L,IAAA9L,KAAA+L,aACA,OAAAL,EAAA/J,QAAA,SAAA,OAAAqK,mBAAAH,IAKAtB,MAAA,SAAAC,EAAAJ,GACA,OAAAI,KAIAyB,EAAAvO,EAAAwF,QAAAC,SACAE,KAAA,SAAA6I,EAAA9B,GACAA,IAAAA,MACAA,EAAAC,SAAArK,KAAAqK,OAAAD,EAAAC,aACA,IAAAD,EAAA+B,aAAAnM,KAAAmM,WAAA/B,EAAA+B,YACAnM,KAAAoM,SACAF,GAAAlM,KAAAqM,MAAAH,EAAAxO,EAAAiC,OAAA2M,QAAA,GAAAlC,OAKAmC,GAAAC,KAAA,EAAAC,QAAA,EAAAC,OAAA,GACAC,GAAAH,KAAA,EAAAC,QAAA,GAGAG,EAAA,SAAAC,EAAAC,EAAAC,GACAA,EAAAC,KAAAC,IAAAD,KAAAE,IAAAH,EAAA,GAAAF,EAAApM,QACA,IAEA0M,EAFAC,EAAArP,MAAA8O,EAAApM,OAAAsM,GACAtM,EAAAqM,EAAArM,OAEA,IAAA0M,EAAA,EAAAA,EAAAC,EAAA3M,OAAA0M,IAAAC,EAAAD,GAAAN,EAAAM,EAAAJ,GACA,IAAAI,EAAA,EAAAA,EAAA1M,EAAA0M,IAAAN,EAAAM,EAAAJ,GAAAD,EAAAK,GACA,IAAAA,EAAA,EAAAA,EAAAC,EAAA3M,OAAA0M,IAAAN,EAAAM,EAAA1M,EAAAsM,GAAAK,EAAAD,IAgaA,SAAAtD,IACA,OAAAA,EAoBA,OAjbAoC,EAAAoB,SAIAhD,OAAAX,EAIA4D,WAAA,aAIAC,OAAA,SAAAnD,GACA,OAAApK,KAAAwN,IAAA,SAAAnD,GAAA,OAAAA,EAAAkD,OAAAnD,MAIAR,KAAA,WACA,OAAAC,EAAAD,KAAAE,MAAA9J,KAAAQ,YAMAgM,IAAA,SAAAN,EAAA9B,GACA,OAAApK,KAAA0K,IAAAwB,EAAAxO,EAAAiC,OAAA+M,OAAA,GAAAtC,EAAAuC,KAIAF,OAAA,SAAAP,EAAA9B,GACAA,EAAA1M,EAAAiC,SAAAyK,GACA,IAAAqD,GAAA/P,EAAAgQ,QAAAxB,GACAA,EAAAuB,GAAAvB,GAAAA,EAAAyB,QACA,IAAAC,EAAA5N,KAAA6N,eAAA3B,EAAA9B,GAKA,OAJAA,EAAAkC,QAAAsB,EAAAnN,SACA2J,EAAA0D,SAAAC,SAAAC,UAAAJ,QAAAA,GACA5N,KAAA4D,QAAA,SAAA5D,KAAAoK,IAEAqD,EAAAG,EAAA,GAAAA,GAOAlD,IAAA,SAAAwB,EAAA9B,GACA,GAAA,MAAA8B,EAAA,EAEA9B,EAAA1M,EAAAiC,SAAA4M,EAAAnC,IACAG,QAAAvK,KAAAiO,UAAA/B,KACAA,EAAAlM,KAAAuK,MAAA2B,EAAA9B,QAGA,IAAAqD,GAAA/P,EAAAgQ,QAAAxB,GACAA,EAAAuB,GAAAvB,GAAAA,EAAAyB,QAEA,IAAAZ,EAAA3C,EAAA2C,GACA,MAAAA,IAAAA,GAAAA,GACAA,EAAA/M,KAAAS,SAAAsM,EAAA/M,KAAAS,QACAsM,EAAA,IAAAA,GAAA/M,KAAAS,OAAA,GAEA,IAgBA4J,EAAA8C,EAhBAzC,KACAwD,KACAC,KACAC,KACAC,KAEA7B,EAAApC,EAAAoC,IACAE,EAAAtC,EAAAsC,MACAD,EAAArC,EAAAqC,OAEA6B,GAAA,EACAC,EAAAvO,KAAAmM,YAAA,MAAAY,IAAA,IAAA3C,EAAAkE,KACAE,EAAA9Q,EAAAyC,SAAAH,KAAAmM,YAAAnM,KAAAmM,WAAA,KAKA,IAAAgB,EAAA,EAAAA,EAAAjB,EAAAzL,OAAA0M,IAAA,CACA9C,EAAA6B,EAAAiB,GAIA,IAAAsB,EAAAzO,KAAA8L,IAAAzB,GACA,GAAAoE,EAAA,CACA,GAAA/B,GAAArC,IAAAoE,EAAA,CACA,IAAAzE,EAAAhK,KAAAiO,UAAA5D,GAAAA,EAAAH,WAAAG,EACAD,EAAAG,QAAAP,EAAAyE,EAAAlE,MAAAP,EAAAI,IACAqE,EAAA/D,IAAAV,EAAAI,GACA+D,EAAAO,KAAAD,GACAF,IAAAD,IAAAA,EAAAG,EAAAE,WAAAH,IAEAH,EAAAI,EAAAG,OACAP,EAAAI,EAAAG,MAAA,EACAlE,EAAAgE,KAAAD,IAEAvC,EAAAiB,GAAAsB,OAGAjC,IACAnC,EAAA6B,EAAAiB,GAAAnN,KAAA6O,eAAAxE,EAAAD,MAEA8D,EAAAQ,KAAArE,GACArK,KAAA8O,cAAAzE,EAAAD,GACAiE,EAAAhE,EAAAuE,MAAA,EACAlE,EAAAgE,KAAArE,IAMA,GAAAoC,EAAA,CACA,IAAAU,EAAA,EAAAA,EAAAnN,KAAAS,OAAA0M,IACA9C,EAAArK,KAAAkM,SAAAiB,GACAkB,EAAAhE,EAAAuE,MAAAR,EAAAM,KAAArE,GAEA+D,EAAA3N,QAAAT,KAAA6N,eAAAO,EAAAhE,GAIA,IAAA2E,GAAA,EACApN,GAAA4M,GAAA/B,GAAAC,EAkBA,GAjBA/B,EAAAjK,QAAAkB,GACAoN,EAAA/O,KAAAS,SAAAiK,EAAAjK,QAAAT,KAAAkM,SAAA8C,KAAA,SAAAC,EAAAC,GACA,OAAAD,IAAAvE,EAAAwE,KAEAlP,KAAAkM,SAAAzL,OAAA,EACAmM,EAAA5M,KAAAkM,SAAAxB,EAAA,GACA1K,KAAAS,OAAAT,KAAAkM,SAAAzL,QACAyN,EAAAzN,SACA8N,IAAAD,GAAA,GACA1B,EAAA5M,KAAAkM,SAAAgC,EAAA,MAAAnB,EAAA/M,KAAAS,OAAAsM,GACA/M,KAAAS,OAAAT,KAAAkM,SAAAzL,QAIA6N,GAAAtO,KAAAsO,MAAAhC,QAAA,KAGAlC,EAAAkC,OAAA,CACA,IAAAa,EAAA,EAAAA,EAAAe,EAAAzN,OAAA0M,IACA,MAAAJ,IAAA3C,EAAA8E,MAAAnC,EAAAI,IACA9C,EAAA6D,EAAAf,IACAvJ,QAAA,MAAAyG,EAAArK,KAAAoK,IAEAkE,GAAAS,IAAA/O,KAAA4D,QAAA,OAAA5D,KAAAoK,IACA8D,EAAAzN,QAAA2N,EAAA3N,QAAA0N,EAAA1N,UACA2J,EAAA0D,SACAC,MAAAG,EACAN,QAAAQ,EACAJ,OAAAG,GAEAnO,KAAA4D,QAAA,SAAA5D,KAAAoK,IAKA,OAAAqD,EAAAvB,EAAA,GAAAA,IAOAG,MAAA,SAAAH,EAAA9B,GACAA,EAAAA,EAAA1M,EAAA+H,MAAA2E,MACA,IAAA,IAAA+C,EAAA,EAAAA,EAAAnN,KAAAkM,SAAAzL,OAAA0M,IACAnN,KAAAmP,iBAAAnP,KAAAkM,SAAAiB,GAAA/C,GAMA,OAJAA,EAAAgF,gBAAApP,KAAAkM,SACAlM,KAAAoM,SACAF,EAAAlM,KAAAwM,IAAAN,EAAAxO,EAAAiC,OAAA2M,QAAA,GAAAlC,IACAA,EAAAkC,QAAAtM,KAAA4D,QAAA,QAAA5D,KAAAoK,GACA8B,GAIAwC,KAAA,SAAArE,EAAAD,GACA,OAAApK,KAAAwM,IAAAnC,EAAA3M,EAAAiC,OAAAoN,GAAA/M,KAAAS,QAAA2J,KAIAiF,IAAA,SAAAjF,GACA,IAAAC,EAAArK,KAAA+M,GAAA/M,KAAAS,OAAA,GACA,OAAAT,KAAAyM,OAAApC,EAAAD,IAIAkF,QAAA,SAAAjF,EAAAD,GACA,OAAApK,KAAAwM,IAAAnC,EAAA3M,EAAAiC,OAAAoN,GAAA,GAAA3C,KAIAmF,MAAA,SAAAnF,GACA,IAAAC,EAAArK,KAAA+M,GAAA,GACA,OAAA/M,KAAAyM,OAAApC,EAAAD,IAIAuD,MAAA,WACA,OAAAA,MAAA7D,MAAA9J,KAAAkM,SAAA1L,YAKAsL,IAAA,SAAA0D,GACA,GAAA,MAAAA,EACA,OAAAxP,KAAAyP,MAAAD,IACAxP,KAAAyP,MAAAzP,KAAA0P,SAAAF,EAAAtF,YAAAsF,KACAA,EAAAZ,KAAA5O,KAAAyP,MAAAD,EAAAZ,MAIAe,IAAA,SAAAH,GACA,OAAA,MAAAxP,KAAA8L,IAAA0D,IAIAzC,GAAA,SAAAmC,GAEA,OADAA,EAAA,IAAAA,GAAAlP,KAAAS,QACAT,KAAAkM,SAAAgD,IAKAU,MAAA,SAAA5F,EAAA6F,GACA,OAAA7P,KAAA6P,EAAA,OAAA,UAAA7F,IAKA8F,UAAA,SAAA9F,GACA,OAAAhK,KAAA4P,MAAA5F,GAAA,IAMAsE,KAAA,SAAAlE,GACA,IAAA+B,EAAAnM,KAAAmM,WACA,IAAAA,EAAA,MAAA,IAAA4D,MAAA,0CACA3F,IAAAA,MAEA,IAAA3J,EAAA0L,EAAA1L,OAUA,OATA/C,EAAAiI,WAAAwG,KAAAA,EAAAzO,EAAAsS,MAAA7D,EAAAnM,OAGA,IAAAS,GAAA/C,EAAAyC,SAAAgM,GACAnM,KAAAkM,SAAAlM,KAAAiQ,OAAA9D,GAEAnM,KAAAkM,SAAAoC,KAAAnC,GAEA/B,EAAAkC,QAAAtM,KAAA4D,QAAA,OAAA5D,KAAAoK,GACApK,MAIAkQ,MAAA,SAAArN,GACA,OAAA7C,KAAAwN,IAAA3K,EAAA,KAMAsH,MAAA,SAAAC,GAEA,IAAAE,GADAF,EAAA1M,EAAAiC,OAAA4K,OAAA,GAAAH,IACAE,QACAiB,EAAAvL,KAQA,OAPAoK,EAAAE,QAAA,SAAAE,GACA,IAAAU,EAAAd,EAAAiC,MAAA,QAAA,MACAd,EAAAL,GAAAV,EAAAJ,GACAE,GAAAA,EAAAtJ,KAAAoJ,EAAAO,QAAAY,EAAAf,EAAAJ,GACAmB,EAAA3H,QAAA,OAAA2H,EAAAf,EAAAJ,IAEAQ,UAAA5K,KAAAoK,GACApK,KAAA4J,KAAA,OAAA5J,KAAAoK,IAMA3G,OAAA,SAAA4G,EAAAD,GAEA,IAAAW,GADAX,EAAAA,EAAA1M,EAAA+H,MAAA2E,OACAW,KAEA,KADAV,EAAArK,KAAA6O,eAAAxE,EAAAD,IACA,OAAA,EACAW,GAAA/K,KAAAwM,IAAAnC,EAAAD,GACA,IAAAmB,EAAAvL,KACAsK,EAAAF,EAAAE,QAMA,OALAF,EAAAE,QAAA,SAAA2E,EAAAzE,EAAA2F,GACApF,GAAAQ,EAAAiB,IAAAyC,EAAAkB,GACA7F,GAAAA,EAAAtJ,KAAAmP,EAAAxF,QAAAsE,EAAAzE,EAAA2F,IAEA9F,EAAAQ,KAAA,KAAAT,GACAC,GAKAE,MAAA,SAAAC,EAAAJ,GACA,OAAAI,GAIA/E,MAAA,WACA,OAAA,IAAAzF,KAAAoQ,YAAApQ,KAAAkM,UACA7B,OAAArK,KAAAqK,OACA8B,WAAAnM,KAAAmM,cAKAuD,SAAA,SAAA1F,GACA,OAAAA,EAAAhK,KAAAqK,OAAArM,UAAA+N,aAAA,OAKAK,OAAA,WACApM,KAAAS,OAAA,EACAT,KAAAkM,YACAlM,KAAAyP,UAKAZ,eAAA,SAAA7E,EAAAI,GACA,GAAApK,KAAAiO,UAAAjE,GAEA,OADAA,EAAAuB,aAAAvB,EAAAuB,WAAAvL,MACAgK,GAEAI,EAAAA,EAAA1M,EAAA+H,MAAA2E,OACAmB,WAAAvL,KACA,IAAAqK,EAAA,IAAArK,KAAAqK,OAAAL,EAAAI,GACA,OAAAC,EAAAgG,iBACArQ,KAAA4D,QAAA,UAAA5D,KAAAqK,EAAAgG,gBAAAjG,IACA,GAFAC,GAMAwD,eAAA,SAAA3B,EAAA9B,GAEA,IADA,IAAAwD,KACAT,EAAA,EAAAA,EAAAjB,EAAAzL,OAAA0M,IAAA,CACA,IAAA9C,EAAArK,KAAA8L,IAAAI,EAAAiB,IACA,GAAA9C,EAAA,CAEA,IAAA6E,EAAAlP,KAAAsQ,QAAAjG,GACArK,KAAAkM,SAAAU,OAAAsC,EAAA,GACAlP,KAAAS,gBAIAT,KAAAyP,MAAApF,EAAAuE,KACA,IAAA/C,EAAA7L,KAAA0P,SAAArF,EAAAH,YACA,MAAA2B,UAAA7L,KAAAyP,MAAA5D,GAEAzB,EAAAkC,SACAlC,EAAA8E,MAAAA,EACA7E,EAAAzG,QAAA,SAAAyG,EAAArK,KAAAoK,IAGAwD,EAAAc,KAAArE,GACArK,KAAAmP,iBAAA9E,EAAAD,IAEA,OAAAwD,GAKAK,UAAA,SAAA5D,GACA,OAAAA,aAAAX,GAIAoF,cAAA,SAAAzE,EAAAD,GACApK,KAAAyP,MAAApF,EAAAuE,KAAAvE,EACA,IAAAwB,EAAA7L,KAAA0P,SAAArF,EAAAH,YACA,MAAA2B,IAAA7L,KAAAyP,MAAA5D,GAAAxB,GACAA,EAAA1H,GAAA,MAAA3C,KAAAuQ,eAAAvQ,OAIAmP,iBAAA,SAAA9E,EAAAD,UACApK,KAAAyP,MAAApF,EAAAuE,KACA,IAAA/C,EAAA7L,KAAA0P,SAAArF,EAAAH,YACA,MAAA2B,UAAA7L,KAAAyP,MAAA5D,GACA7L,OAAAqK,EAAAkB,mBAAAlB,EAAAkB,WACAlB,EAAAzH,IAAA,MAAA5C,KAAAuQ,eAAAvQ,OAOAuQ,eAAA,SAAAzM,EAAAuG,EAAAkB,EAAAnB,GACA,GAAAC,EAAA,CACA,IAAA,QAAAvG,GAAA,WAAAA,IAAAyH,IAAAvL,KAAA,OAEA,GADA,YAAA8D,GAAA9D,KAAAyM,OAAApC,EAAAD,GACA,WAAAtG,EAAA,CACA,IAAA0M,EAAAxQ,KAAA0P,SAAArF,EAAAoG,sBACA5E,EAAA7L,KAAA0P,SAAArF,EAAAH,YACAsG,IAAA3E,IACA,MAAA2E,UAAAxQ,KAAAyP,MAAAe,GACA,MAAA3E,IAAA7L,KAAAyP,MAAA5D,GAAAxB,KAIArK,KAAA4D,QAAAkG,MAAA9J,KAAAQ,cASA9C,EAAAiC,MAAAkK,GAEA6G,aAAA,EAMAC,aAAA,EAEA/G,KAzoBA,SAAAsB,EAAAb,EAAAD,GACA,IAAAwG,EAAAvH,EAAA6B,GAGAxN,EAAAmT,SAAAzG,IAAAA,OACAsG,YAAA7G,EAAA6G,YACAC,YAAA9G,EAAA8G,cAIA,IAAAnL,GAAAoL,KAAAA,EAAAE,SAAA,QAGA1G,EAAAqB,MACAjG,EAAAiG,IAAA/N,EAAAiO,OAAAtB,EAAA,QAAAuB,YAIA,MAAAxB,EAAA2G,OAAA1G,GAAA,WAAAa,GAAA,WAAAA,GAAA,UAAAA,IACA1F,EAAAwL,YAAA,mBACAxL,EAAAuL,KAAAE,KAAAC,UAAA9G,EAAAJ,OAAAK,EAAAkD,OAAAnD,KAIAA,EAAAuG,cACAnL,EAAAwL,YAAA,oCACAxL,EAAAuL,KAAAvL,EAAAuL,MAAA1G,OAAA7E,EAAAuL,UAKA,GAAA3G,EAAAsG,cAAA,QAAAE,GAAA,WAAAA,GAAA,UAAAA,GAAA,CACApL,EAAAoL,KAAA,OACAxG,EAAAuG,cAAAnL,EAAAuL,KAAAI,QAAAP,GACA,IAAAQ,EAAAhH,EAAAgH,WACAhH,EAAAgH,WAAA,SAAAhG,GAEA,GADAA,EAAAiG,iBAAA,yBAAAT,GACAQ,EAAA,OAAAA,EAAAtH,MAAA9J,KAAAQ,YAKA,QAAAgF,EAAAoL,MAAAxG,EAAAuG,cACAnL,EAAA8L,aAAA,GAIA,IAAAC,EAAAnH,EAAAmH,MACAnH,EAAAmH,MAAA,SAAAnG,EAAAoG,EAAAC,GACArH,EAAAoH,WAAAA,EACApH,EAAAqH,YAAAA,EACAF,GAAAA,EAAAvQ,KAAAoJ,EAAAO,QAAAS,EAAAoG,EAAAC,IAIA,IAAArG,EAAAhB,EAAAgB,IAAA1N,EAAAgU,IAAAC,QAAAjU,EAAAiC,MAAA6F,EAAA4E,IAEA,OADAC,EAAAzG,QAAA,UAAAyG,EAAAe,EAAAhB,GACAgB,GAklBA1B,OAAAA,EACAuC,WAAAA,IAIA3O,EAAAuM,OAAAA,IAGAxM,EAAA,uBACA,2BACA,SAAAuU,GACA,OAAAA,IAGAvU,EAAA,0BACA,8BACA,SAAAwU,GACA,OAAAA,IAGAxU,EAAA,0BACA,yBACA,SAAAyU,GACA,OAAAA,IAGAzU,EAAA,0BAAA,WAcA,IAAA0U,EAAA,WACA,SAAAA,IACA/R,KAAAgS,YAAA,OACAhS,KAAAiS,eAAA,MACAjS,KAAAkS,SA0FA,OAxFAC,OAAAC,eAAAL,EAAA/T,UAAA,cAKA8N,IAAA,WACA,OAAA9L,KAAAgS,aAEAtH,IAAA,SAAAnM,GACAyB,KAAAgS,YAAAzT,GAEA8T,YAAA,EACAC,cAAA,IAEAH,OAAAC,eAAAL,EAAA/T,UAAA,iBAMA8N,IAAA,WACA,OAAA9L,KAAAiS,gBAEAvH,IAAA,SAAAnM,GACAyB,KAAAiS,eAAA1T,GAEA8T,YAAA,EACAC,cAAA,IAEAH,OAAAC,eAAAL,EAAA/T,UAAA,SAIA8N,IAAA,WACA,OAAAqG,OAAAI,KAAAvS,KAAAkS,QAEAG,YAAA,EACAC,cAAA,IAWAP,EAAA/T,UAAAwU,UAAA,SAAA5B,GACA,MAAAA,SACA5Q,KAAAkS,MAAAtB,GAEA5Q,KAAAkS,MAAA,MASAH,EAAA/T,UAAAyU,QAAA,SAAA7B,GACA,OAAA5Q,KAAAkS,MAAAtB,IAAA,IAWAmB,EAAA/T,UAAA+G,QAAA,SAAA6L,EAAArS,GACAyB,KAAAkS,MAAAtB,GAAArS,GASAwT,EAAA/T,UAAAgH,aAAA,SAAA0N,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAC,UACAF,EAAAG,WAAAN,EACAG,EAAAI,YAAAC,EAAAP,EAAAQ,EAAAP,IAEAb,EA9FA,GAmHAe,EAAA,WAIA,SAAAA,IAGA,GAFA9S,KAAAoT,WAAA,EAEAN,EAAAC,UACA,KAAA,0CAIA,IAAAM,GAAA,EAQA,GAPApR,SAAAqR,iBAAA,OAAA,MACAC,cAEA,OADAF,GAAA,GACA,KAIA,iBAAApR,SAAA,CACA,IAAA+F,EAAA/F,SACAuR,EAAAxT,KAAAyT,YAAAC,KAAA1T,MACA2T,EAAA3T,KAAA4T,WAAAF,KAAA1T,MACA6T,EAAA7T,KAAA8T,UAAAJ,KAAA1T,MACA+T,IAAAV,IAAAE,SAAA,EAAAS,SAAA,GACAhM,EAAAsL,iBAAA,aAAAE,EAAAO,GACA/L,EAAAsL,iBAAA,YAAAK,EAAAI,GACA/L,EAAAsL,iBAAA,WAAAO,GACA7L,EAAAsL,iBAAA,cAAAO,IAkPA,OA5OAf,EAAAmB,YAAA,WACA,OAAAnB,EAAAC,WAGAD,EAAA9U,UAAAyV,YAAA,SAAAjQ,GACA,IAAA0Q,EAAAlU,KACA,GAAAA,KAAAmU,cAAA3Q,GAAA,CAEA,GAAA4Q,KAAAC,MAAArU,KAAAoT,WAAAN,EAAAwB,WACAtU,KAAAuU,eAAA/Q,EAAA,WAAAA,EAAAuC,QAGA,OAFAvC,EAAAsD,sBACA9G,KAAAoM,SAKApM,KAAAoM,SAEA,IAAAlE,EAAAlI,KAAAwU,kBAAAhR,EAAAuC,QACAmC,IAEAlI,KAAAuU,eAAA/Q,EAAA,YAAAA,EAAAuC,SACA/F,KAAAuU,eAAA/Q,EAAA,YAAAA,EAAAuC,UAEA/F,KAAAyU,YAAAvM,EACAlI,KAAA0U,QAAA1U,KAAA2U,UAAAnR,GACAxD,KAAA4U,WAAApR,EACAA,EAAAsD,iBAEA+N,WAAA,WACAX,EAAAO,aAAAvM,GAAA,MAAAgM,EAAAY,MACAZ,EAAAK,eAAA/Q,EAAA,cAAA0E,IACAgM,EAAA9H,UAGA0G,EAAAiC,cAKAjC,EAAA9U,UAAA4V,WAAA,SAAApQ,GACA,GAAAxD,KAAAmU,cAAA3Q,GAAA,CAEA,IAAAuC,EAAA/F,KAAAgV,WAAAxR,GACA,GAAAxD,KAAAuU,eAAA/Q,EAAA,YAAAuC,GAGA,OAFA/F,KAAA4U,WAAApR,OACAA,EAAAsD,iBAIA,GAAA9G,KAAAyU,cAAAzU,KAAA8U,KAAA,CACA,IAAAG,EAAAjV,KAAAkV,UAAA1R,GACAyR,EAAAnC,EAAAqC,aACAnV,KAAAuU,eAAA/Q,EAAA,YAAAxD,KAAAyU,aACAzU,KAAAoV,aAAA5R,GACAxD,KAAAuU,eAAA/Q,EAAA,YAAAuC,IAIA/F,KAAA8U,OACA9U,KAAA4U,WAAApR,EACAA,EAAAsD,iBACAf,GAAA/F,KAAAqV,cACArV,KAAAuU,eAAAvU,KAAA4U,WAAA,YAAA5U,KAAAqV,aACArV,KAAAuU,eAAA/Q,EAAA,YAAAuC,GACA/F,KAAAqV,YAAAtP,GAEA/F,KAAAsV,WAAA9R,GACAxD,KAAAuU,eAAA/Q,EAAA,WAAAuC,MAIA+M,EAAA9U,UAAA8V,UAAA,SAAAtQ,GACA,GAAAxD,KAAAmU,cAAA3Q,GAAA,CAEA,GAAAxD,KAAAuU,eAAAvU,KAAA4U,WAAA,UAAApR,EAAAuC,QAEA,YADAvC,EAAAsD,iBAIA9G,KAAA8U,OACA9U,KAAAyU,YAAA,KACAzU,KAAAuU,eAAAvU,KAAA4U,WAAA,QAAApR,EAAAuC,QACA/F,KAAAoT,WAAAgB,KAAAC,OAGArU,KAAAuV,gBACAvV,KAAAyU,cACAjR,EAAAoN,KAAAN,QAAA,UAAA,GACAtQ,KAAAuU,eAAAvU,KAAA4U,WAAA,OAAA5U,KAAAqV,aAEArV,KAAAuU,eAAAvU,KAAA4U,WAAA,UAAA5U,KAAAyU,aACAzU,KAAAoM,YAMA0G,EAAA9U,UAAAmW,cAAA,SAAA3Q,GACA,OAAAA,IACAA,EAAAgS,kBACAhS,EAAAiS,SAAAjS,EAAAiS,QAAAhV,OAAA,GAGAqS,EAAA9U,UAAAoO,OAAA,WACApM,KAAAuV,gBACAvV,KAAAyU,YAAA,KACAzU,KAAA4U,WAAA,KACA5U,KAAAqV,YAAA,KACArV,KAAA0U,QAAA,KACA1U,KAAA0V,cAAA,IAAA3D,GAGAe,EAAA9U,UAAA2W,UAAA,SAAAnR,EAAAmS,GAIA,OAHAnS,GAAAA,EAAAiS,UACAjS,EAAAA,EAAAiS,QAAA,KAEAvC,EAAAyC,EAAAnS,EAAAU,MAAAV,EAAAoS,QAAAzC,EAAAwC,EAAAnS,EAAAa,MAAAb,EAAAqS,UAGA/C,EAAA9U,UAAAkX,UAAA,SAAA1R,GACA,IAAAO,EAAA/D,KAAA2U,UAAAnR,GACA,OAAAwJ,KAAA8I,IAAA/R,EAAAmP,EAAAlT,KAAA0U,QAAAxB,GAAAlG,KAAA8I,IAAA/R,EAAAoP,EAAAnT,KAAA0U,QAAAvB,IAGAL,EAAA9U,UAAAgX,WAAA,SAAAxR,GAGA,IAFA,IAAAuS,EAAA/V,KAAA2U,UAAAnR,GACAwS,EAAA/T,SAAAgU,iBAAAF,EAAA7C,EAAA6C,EAAA5C,GACA6C,GAAA,QAAArV,iBAAAqV,GAAAE,eACAF,EAAAA,EAAAG,cAEA,OAAAH,GAGAlD,EAAA9U,UAAAoX,aAAA,SAAA5R,GAEAxD,KAAA8U,MACA9U,KAAAuV,gBAGA,IAAArN,EAAAlI,KAAAgT,YAAAhT,KAAAyU,YAKA,GAJAzU,KAAA8U,KAAA5M,EAAAkO,WAAA,GACApW,KAAAqW,WAAAnO,EAAAlI,KAAA8U,MACA9U,KAAA8U,KAAAlU,MAAA0D,IAAAtE,KAAA8U,KAAAlU,MAAAuD,KAAA,WAEAnE,KAAAgT,WAAA,CACA,IAAAsD,EAAApO,EAAAqO,wBACAR,EAAA/V,KAAA2U,UAAAnR,GACAxD,KAAAiT,YAAAC,EAAA6C,EAAA7C,EAAAoD,EAAAnS,KAAAgP,EAAA4C,EAAA5C,EAAAmD,EAAAhS,KACAtE,KAAA8U,KAAAlU,MAAA/B,QAAAiU,EAAA0D,SAAAC,WAGAzW,KAAAsV,WAAA9R,GACAvB,SAAAE,KAAAC,YAAApC,KAAA8U,OAGAhC,EAAA9U,UAAAuX,cAAA,WACAvV,KAAA8U,MAAA9U,KAAA8U,KAAAqB,eACAnW,KAAA8U,KAAAqB,cAAA7T,YAAAtC,KAAA8U,MAEA9U,KAAA8U,KAAA,KACA9U,KAAAgT,WAAA,MAGAF,EAAA9U,UAAAsX,WAAA,SAAA9R,GACA,IAAA0Q,EAAAlU,KACAA,KAAA8U,MACA4B,sBAAA,WACA,IAAAX,EAAA7B,EAAAS,UAAAnR,GAAA,GACAmT,EAAAzC,EAAAY,KAAAlU,MACA+V,EAAAC,SAAA,WACAD,EAAAT,cAAA,OACAS,EAAAE,OAAA,SACAF,EAAAxS,KAAA6I,KAAA8J,MAAAf,EAAA7C,EAAAgB,EAAAjB,WAAAC,GAAA,KACAyD,EAAArS,IAAA0I,KAAA8J,MAAAf,EAAA5C,EAAAe,EAAAjB,WAAAE,GAAA,QAKAL,EAAA9U,UAAA+Y,WAAA,SAAAC,EAAA9O,EAAAnH,GACA,IAAA,IAAAoM,EAAA,EAAAA,EAAApM,EAAAN,OAAA0M,IAAA,CACA,IAAApJ,EAAAhD,EAAAoM,GACA6J,EAAAjT,GAAAmE,EAAAnE,KAGA+O,EAAA9U,UAAAqY,WAAA,SAAAnO,EAAA8O,GAMA,GAJAlE,EAAAmE,SAAA/Y,QAAA,SAAAgZ,GACAF,EAAAG,gBAAAD,KAGAhP,aAAAkP,kBAAA,CACA,IAAAC,EAAAnP,EACAoP,EAAAN,EACAM,EAAAC,MAAAF,EAAAE,MACAD,EAAAtU,OAAAqU,EAAArU,OACAsU,EAAAE,WAAA,MAAAC,UAAAJ,EAAA,EAAA,GAIA,IADA,IAAAK,EAAA/W,iBAAAuH,GACAiF,EAAA,EAAAA,EAAAuK,EAAAjX,OAAA0M,IAAA,CACA,IAAAhM,EAAAuW,EAAAvK,GACAhM,EAAAmP,QAAA,cAAA,IACA0G,EAAApW,MAAAO,GAAAuW,EAAAvW,IAGA6V,EAAApW,MAAAsV,cAAA,OAEA,IAAA,IAAA/I,EAAA,EAAAA,EAAAjF,EAAAyP,SAAAlX,OAAA0M,IACAnN,KAAAqW,WAAAnO,EAAAyP,SAAAxK,GAAA6J,EAAAW,SAAAxK,KAGA2F,EAAA9U,UAAAuW,eAAA,SAAA/Q,EAAAoN,EAAA7K,GACA,GAAAvC,GAAAuC,EAAA,CACA,IAAA6R,EAAA3V,SAAA4V,YAAA,SACAC,EAAAtU,EAAAiS,QAAAjS,EAAAiS,QAAA,GAAAjS,EAQA,OAPAoU,EAAAG,UAAAnH,GAAA,GAAA,GACAgH,EAAAI,OAAA,EACAJ,EAAAK,MAAAL,EAAAM,QAAA,EACAlY,KAAA+W,WAAAa,EAAApU,EAAAsP,EAAAqF,WACAnY,KAAA+W,WAAAa,EAAAE,EAAAhF,EAAAsF,UACAR,EAAA9S,aAAA9E,KAAA0V,cACA3P,EAAAsS,cAAAT,GACAA,EAAApC,iBAEA,OAAA,GAGA1C,EAAA9U,UAAAwW,kBAAA,SAAAhR,GACA,KAAAA,EAAAA,EAAAA,EAAA2S,cACA,GAAA3S,EAAA8U,aAAA,cAAA9U,EAAAD,UACA,OAAAC,EAGA,OAAA,MAEAsP,EA/QA,GAgSA,OAbAA,EAAAC,UAAA,IAAAD,EAEAA,EAAAqC,WAAA,EACArC,EAAA0D,SAAA,GACA1D,EAAAwB,UAAA,IACAxB,EAAAiC,SAAA,IAEAjC,EAAAmE,SAAA,2BAAA7W,MAAA,KAGA0S,EAAAqF,UAAA,kCAAA/X,MAAA,KACA0S,EAAAsF,SAAA,8CAAAhY,MAAA,KAEA0S,IAGAzV,EAAA,4BACA,gCACA,SAAAkb,GACA,OAAAA,IAGAlb,EAAA,sBACA,0BACA,SAAAmb,GACA,OAAAA,IAGAnb,EAAA,yBACA,YACA,UACA,UACA,UACA,WACA,SACA,YACA,UACA,UACA,SAAAC,EAAAI,EAAAC,EAAAF,EAAAiC,EAAA7B,EAAAC,EAAA8T,EAAA4G,GACA,SAAAC,IACA,OAAAA,EAGA,IAAAC,EAAAhb,EAAAwF,QAAAC,SACAE,KAAA,SAAA2S,EAAA5L,GAEA,GAAA1M,EAAAib,WAAAvO,GAAA,CACA,IACAA,EAAA4L,EACAA,EAAA5L,EAEA1M,EAAAib,WAAA3C,GACAhW,KAAAgW,GAAAA,EAEAhW,KAAAgW,GAAA,KAEA5L,GACA1M,EAAAiC,MAAAK,KAAAoK,GAEApK,KAAA4O,MACA5O,KAAA4O,IAAAlR,EAAAkb,SAAA,MAEA5Y,KAAA6Y,kBAIAC,QAAA,MAIAC,EAAA,SAAAC,GACA,OAAAhZ,KAAAiZ,IAAAC,KAAAF,IAMAG,OAAA,WACA,OAAAnZ,MAKAyM,OAAA,WAGA,OAFAzM,KAAAoZ,iBACApZ,KAAAqZ,aACArZ,MAMAoZ,eAAA,WACApZ,KAAAiZ,IAAAxM,UAKA6M,WAAA,SAAAvX,GAIA,OAHA/B,KAAAuZ,mBACAvZ,KAAAwZ,YAAAzX,GACA/B,KAAAyZ,iBACAzZ,MAQAwZ,YAAA,SAAAxD,GACAhW,KAAAiZ,IAAAR,EAAAM,EAAA/C,GACAhW,KAAAgW,GAAAhW,KAAAiZ,IAAA,IAgBAQ,eAAA,SAAAC,GAEA,GADAA,IAAAA,EAAAhc,EAAAiO,OAAA3L,KAAA,YACA0Z,EAAA,OAAA1Z,KAEA,IAAA,IAAAmB,KADAnB,KAAAuZ,mBACAG,EAAA,CACA,IAAAxO,EAAAwO,EAAAvY,GAEA,GADAzD,EAAAiI,WAAAuF,KAAAA,EAAAlL,KAAAkL,IACAA,EAAA,CACA,IAAA5K,EAAAa,EAAAb,MAAAqZ,uBACA3Z,KAAA4Z,SAAAtZ,EAAA,GAAAA,EAAA,GAAA5C,EAAAsS,MAAA9E,EAAAlL,QAEA,OAAAA,MAMA4Z,SAAA,SAAAlU,EAAAsT,EAAAa,GAEA,OADA7Z,KAAAiZ,IAAAtW,GAAA+C,EAAA,kBAAA1F,KAAA8Z,IAAAd,EAAAa,GACA7Z,MAMAuZ,iBAAA,WAEA,OADAvZ,KAAAiZ,KAAAjZ,KAAAiZ,IAAArW,IAAA,kBAAA5C,KAAA8Z,KACA9Z,MAKA+Z,WAAA,SAAArU,EAAAsT,EAAAa,GAEA,OADA7Z,KAAAiZ,IAAArW,IAAA8C,EAAA,kBAAA1F,KAAA8Z,IAAAd,EAAAa,GACA7Z,MAKAga,eAAA,SAAAlB,EAAA9O,GACA,OAAArM,EAAAuE,cAAA4W,EAAA9O,IAOA6O,eAAA,WACA,GAAA7Y,KAAAgW,GAOAhW,KAAAsZ,WAAA5b,EAAAiO,OAAA3L,KAAA,WAPA,CACA,IAAAgK,EAAAtM,EAAAiC,SAAAjC,EAAAiO,OAAA3L,KAAA,eACAA,KAAA6L,KAAA7B,EAAA6B,GAAAnO,EAAAiO,OAAA3L,KAAA,OACAA,KAAAb,YAAA6K,EAAA,MAAAtM,EAAAiO,OAAA3L,KAAA,cACAA,KAAAsZ,WAAAtZ,KAAAga,eAAAtc,EAAAiO,OAAA3L,KAAA,WAAAgK,IACAhK,KAAAia,eAAAjQ,KAQAiQ,eAAA,SAAA/P,GACAlK,KAAAiZ,IAAApW,KAAAqH,IAKAgQ,KAAA,SAAAC,EAAAxP,GAOA,OANAwP,EAAAna,KAAAoa,UAAApa,KAAAoa,SAAAD,IAAAA,EAAA1D,WACA9L,GACAjN,EAAAmH,KAAA8F,EAAA,SAAAxJ,EAAA5C,GACA4b,EAAAA,EAAAxY,QAAA,IAAAR,EAAA,IAAA5C,KAGA4b,KAiBA,OARAzc,EAAAiC,MAAA8Y,GACAM,EAAAnH,EAEAvU,OAPA,SAAAiB,EAAAoN,EAAA1N,KAQA0a,OAAAA,IAIApb,EAAAmb,QAAAA,IAGApb,EAAA,sBACA,YACA,YACA,QACA,UACA,QACA,YACA,YACA,UACA,WACA,OACA,SACA,WACA,WACA,UACA,UACA,aACA,aACA,WACA,WACA,eACA,UACA,SACA,aACA,SAAAC,GACA,OAAAA,IAGAD,EAAA,iBAAA,sBAAA,SAAAgd,GAAA,OAAAA","file":"../skylark-utils.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils/browser',[\r\n    \"skylark-utils-dom/browser\"\r\n], function(browser) {\r\n    return browser;\r\n});\r\n\ndefine('skylark-utils/css',[\r\n    \"skylark-utils-dom/css\"\r\n], function(css) {\r\n    return css;\r\n});\r\n\ndefine('skylark-utils/datax',[\r\n    \"skylark-utils-dom/datax\"\r\n], function(datax) {\r\n    return datax;\r\n});\r\n\ndefine('skylark-utils/langx',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    return langx;\r\n});\r\n\ndefine('skylark-utils/noder',[\r\n    \"skylark-utils-dom/noder\"\r\n], function(noder) {\r\n    return noder;\r\n});\r\n\ndefine('skylark-utils/finder',[\r\n    \"skylark-utils-dom/finder\"\r\n], function(finder) {\r\n    return finder;\r\n});\r\n\ndefine('skylark-utils/geom',[\r\n    \"skylark-utils-dom/geom\"\r\n], function(geom) {\r\n    return geom;\r\n});\r\n\ndefine('skylark-utils/eventer',[\r\n    \"skylark-utils-dom/eventer\"\r\n], function(eventer) {\r\n    return eventer;\r\n});\r\n\ndefine('skylark-utils/styler',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getComputedStyle(elm, '')\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.styler = styler;\r\n});\ndefine('skylark-utils/dnd',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n        klassName: \"Draggable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this;\r\n\r\n            self.elm = elm;\r\n            self.draggingClass = params.draggingClass || \"dragging\",\r\n                self.params = langx.clone(params);\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var params = self.params;\r\n                    if (params.handle) {\r\n                        self.dragHandle = finder.closest(e.target, params.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (params.source) {\r\n                        self.dragSource = finder.closest(e.target, params.source);\r\n                    } else {\r\n                        self.dragSource = self.elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this,\r\n                draggingClass = params.draggingClass || \"dragging\",\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            self.elm = elm;\r\n            self._params = params;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n\r\n    /*   \r\n     * Make the specified element be in a moveable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function draggable(elm, params) {\r\n        return new Draggable(elm, params);\r\n    }\r\n\r\n    /*   \r\n     * Make the specified element be in a droppable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function droppable(elm, params) {\r\n        return new Droppable(elm, params);\r\n    }\r\n\r\n\r\n    function dnd() {\r\n        return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n        //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable: draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable: droppable,\r\n\r\n        manager: manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});\ndefine('skylark-utils/_devices/usermedia',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.getUserMedia = navigator.getUserMedia\r\n                        || navigator.webkitGetUserMedia\r\n                        || navigator.mozGetUserMedia\r\n                        || navigator.msGetUserMedia;\r\n   \r\n    var Deferred = langx.Deferred,\r\n        localStream  = null;\r\n\r\n    function usermedia() {\r\n        return usermedia;\r\n    }\r\n\r\n    langx.mixin(usermedia, {\r\n        isSupported : function() {\r\n            return !!navigator.getUserMedia;\r\n        },\r\n\r\n        start : function(video,audio) {\r\n\r\n            var d = new Deferred();\r\n            navigator.getUserMedia (\r\n                {video: true,audio: true},\r\n                // successCallback\r\n                function(stream) {\r\n                    localStream = stream;\r\n                    video.src = window.URL.createObjectURL(localMediaStream);\r\n                    video.onloadedmetadata = function(e) {\r\n                         // Do something with the video here.\r\n                    };\r\n                    d.resolve();\r\n                },\r\n\r\n                // errorCallback\r\n                function(err) {\r\n                  d.reject(err);\r\n                }\r\n            );\r\n\r\n            return d.promise;\r\n        },\r\n\r\n        stop : function() {\r\n            if (localStream) {\r\n                localStream.stop();\r\n                localStream = null; \r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return  usermedia;\r\n});\r\n\ndefine('skylark-utils/_devices/vibrate',[\r\n    \"../langx\"\r\n], function(langx) {\r\n    navigator.vibrate = navigator.vibrate\r\n                        || navigator.webkitVibrate\r\n                        || navigator.mozVibrate\r\n                        || navigator.msVibrate;\r\n    \r\n\r\n    function vibrate() {\r\n        return vibrate;\r\n    }\r\n\r\n    langx.mixin(vibrate, {\r\n        isSupported : function() {\r\n            return !!navigator.vibrate;\r\n        },\r\n\r\n        start : function(duration) {\r\n            navigator.vibrate(duration);\r\n        },\r\n\r\n        stop : function() {\r\n            navigator.vibrate(0);\r\n        }\r\n    });\r\n\r\n\r\n    return  vibrate;\r\n});\r\n\ndefine('skylark-utils/devices',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./_devices/usermedia\",\r\n    \"./_devices/vibrate\"\r\n], function(skylark,langx,usermedia,vibrate) {\r\n\r\n    function devices() {\r\n        return devices;\r\n    }\r\n\r\n    langx.mixin(devices, {\r\n        usermedia: usermedia,\r\n        vibrate : vibrate\r\n    });\r\n\r\n\r\n    return skylark.devices = devices;\r\n});\r\n\ndefine('skylark-utils/filer',[\r\n    \"skylark-utils-filer/filer\"\r\n], function(filer) {\r\n    return filer;\r\n});\ndefine('skylark-utils/fx',[\r\n    \"skylark-utils-dom/fx\"\r\n], function(fx) {\r\n    return fx;\r\n});\r\n\ndefine('skylark-utils/images',[\r\n    \"skylark-utils-dom/images\"\r\n], function(images) {\r\n    return images;\r\n});\r\n\ndefine('skylark-utils/models',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark,langx) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = langx.Xhr.request(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"init\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return skylark.models = models;\r\n});\r\n\ndefine('skylark-utils/query',[\r\n    \"skylark-utils-dom/query\"\r\n], function(query) {\r\n    return query;\r\n});\r\n\ndefine('skylark-utils/scripter',[\r\n    \"skylark-utils-dom/scripter\"\r\n], function(scripter) {\r\n    return scripter;\r\n});\r\n\ndefine('skylark-utils/storages',[\r\n    \"skylark-utils-storage\"\r\n], function(storages) {\r\n    return storages;\r\n});\r\n\ndefine('skylark-utils/touchx',[], function() {\r\n\r\n    //The following code is borrow from DragDropTouch (https://github.com/Bernardo-Castilho/dragdroptouch)\r\n\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function() {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function() {\r\n                return this._dropEffect;\r\n            },\r\n            set: function(value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function() {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function(value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function() {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function(type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            } else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function(type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function(type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function(img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function() {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', null, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if ('ontouchstart' in document) {\r\n                var d = document,\r\n                    ts = this._touchstart.bind(this),\r\n                    tm = this._touchmove.bind(this),\r\n                    te = this._touchend.bind(this),\r\n                    opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function() {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function(e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function() {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img) {\r\n                    var delta = this._getDelta(e);\r\n                    if (delta > DragDropTouch._THRESHOLD) {\r\n                        this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                        this._createImage(e);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                    }\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function(e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function(e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function() {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._dataTransfer = new DataTransfer();\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function(e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function(e) {\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function(e) {\r\n            var pt = this._getPoint(e),\r\n                el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function(e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(),\r\n                    pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function() {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function(e) {\r\n            var _this = this;\r\n            if (this._img) {\r\n                requestAnimationFrame(function() {\r\n                    var pt = _this._getPoint(e, true),\r\n                        s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                });\r\n            }\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function(dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function(src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function(att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src,\r\n                    cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function(e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'),\r\n                    t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function(e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n\r\n    /*private*/\r\n    DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\r\n\r\n    return DragDropTouch;\r\n});\r\n\ndefine('skylark-utils/transforms',[\r\n    \"skylark-utils-dom/transforms\"\r\n], function(transforms) {\r\n    return transforms;\r\n});\r\n\ndefine('skylark-utils/elmx',[\r\n    \"skylark-utils-dom/elmx\"\r\n], function(elmx) {\r\n    return elmx;\r\n});\r\n\ndefine('skylark-utils/widgets',[\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./styler\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./query\",\r\n    \"./elmx\"\r\n], function(skylark,langx,noder, datax, styler, geom, eventer,query,elmx) {\r\n\tfunction widgets() {\r\n\t    return widgets;\r\n\t}\r\n\r\n\tvar Widget = langx.Evented.inherit({\r\n\t    init :function(el,options) {\r\n\t    \t//for supporting init(options,el)\r\n\t        if (langx.isHtmlNode(options)) {\r\n\t        \tvar _t = el,\r\n\t        \t\toptions = el;\r\n\t            el = options;\r\n\t        }\r\n\t        if (langx.isHtmlNode(el)) { \r\n\t        \tthis.el = el;\r\n\t    \t} else {\r\n\t    \t\tthis.el = null;\r\n\t    \t}\r\n\t        if (options) {\r\n\t            langx.mixin(this,options);\r\n\t        }\r\n\t        if (!this.cid) {\r\n\t            this.cid = langx.uniqueId('w');\r\n\t        }\r\n\t        this._ensureElement();\r\n\t    },\r\n\r\n\t    // The default `tagName` of a View's element is `\"div\"`.\r\n\t    tagName: 'div',\r\n\r\n\t    // query delegate for element lookup, scoped to DOM elements within the\r\n\t    // current view. This should be preferred to global lookups where possible.\r\n\t    $: function(selector) {\r\n\t      return this.$el.find(selector);\r\n\t    },\r\n\r\n\t    // **render** is the core function that your view should override, in order\r\n\t    // to populate its element (`this.el`), with the appropriate HTML. The\r\n\t    // convention is for **render** to always return `this`.\r\n\t    render: function() {\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view by taking the element out of the DOM, and removing any\r\n\t    // applicable Backbone.Events listeners.\r\n\t    remove: function() {\r\n\t      this._removeElement();\r\n\t      this.unlistenTo();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Remove this view's element from the document and all event listeners\r\n\t    // attached to it. Exposed for subclasses using an alternative DOM\r\n\t    // manipulation API.\r\n\t    _removeElement: function() {\r\n\t      this.$el.remove();\r\n\t    },\r\n\r\n\t    // Change the view's element (`this.el` property) and re-delegate the\r\n\t    // view's events on the new element.\r\n\t    setElement: function(element) {\r\n\t      this.undelegateEvents();\r\n\t      this._setElement(element);\r\n\t      this.delegateEvents();\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Creates the `this.el` and `this.$el` references for this view using the\r\n\t    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\r\n\t    // context or an element. Subclasses can override this to utilize an\r\n\t    // alternative DOM manipulation API and are only required to set the\r\n\t    // `this.el` property.\r\n\t    _setElement: function(el) {\r\n\t      this.$el = widgets.$(el);\r\n\t      this.el = this.$el[0];\r\n\t    },\r\n\r\n\t    // Set callbacks, where `this.events` is a hash of\r\n\t    //\r\n\t    // *{\"event selector\": \"callback\"}*\r\n\t    //\r\n\t    //     {\r\n\t    //       'mousedown .title':  'edit',\r\n\t    //       'click .button':     'save',\r\n\t    //       'click .open':       function(e) { ... }\r\n\t    //     }\r\n\t    //\r\n\t    // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n\t    // Uses event delegation for efficiency.\r\n\t    // Omitting the selector binds the event to `this.el`.\r\n\t    delegateEvents: function(events) {\r\n\t      events || (events = langx.result(this, 'events'));\r\n\t      if (!events) return this;\r\n\t      this.undelegateEvents();\r\n\t      for (var key in events) {\r\n\t        var method = events[key];\r\n\t        if (!langx.isFunction(method)) method = this[method];\r\n\t        if (!method) continue;\r\n\t        var match = key.match(delegateEventSplitter);\r\n\t        this.delegate(match[1], match[2], langx.proxy(method, this));\r\n\t      }\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Add a single event listener to the view's element (or a child element\r\n\t    // using `selector`). This only works for delegate-able events: not `focus`,\r\n\t    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\r\n\t    delegate: function(eventName, selector, listener) {\r\n\t      this.$el.on(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Clears all callbacks previously bound to the view by `delegateEvents`.\r\n\t    // You usually don't need to use this, but may wish to if you have multiple\r\n\t    // Backbone views attached to the same DOM element.\r\n\t    undelegateEvents: function() {\r\n\t      if (this.$el) this.$el.off('.delegateEvents' + this.uid);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // A finer-grained `undelegateEvents` for removing a single delegated event.\r\n\t    // `selector` and `listener` are both optional.\r\n\t    undelegate: function(eventName, selector, listener) {\r\n\t      this.$el.off(eventName + '.delegateEvents' + this.uid, selector, listener);\r\n\t      return this;\r\n\t    },\r\n\r\n\t    // Produces a DOM element to be assigned to your view. Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _createElement: function(tagName,attrs) {\r\n\t      return noder.createElement(tagName,attrs);\r\n\t    },\r\n\r\n\t    // Ensure that the View has a DOM element to render into.\r\n\t    // If `this.el` is a string, pass it through `$()`, take the first\r\n\t    // matching element, and re-assign it to `el`. Otherwise, create\r\n\t    // an element from the `id`, `className` and `tagName` properties.\r\n\t    _ensureElement: function() {\r\n\t      if (!this.el) {\r\n\t        var attrs = langx.mixin({}, langx.result(this, 'attributes'));\r\n\t        if (this.id) attrs.id = langx.result(this, 'id');\r\n\t        if (this.className) attrs['class'] = langx.result(this, 'className');\r\n\t        this.setElement(this._createElement(langx.result(this, 'tagName'),attrs));\r\n\t        this._setAttributes(attrs);\r\n\t      } else {\r\n\t        this.setElement(langx.result(this, 'el'));\r\n\t      }\r\n\t    },\r\n\r\n\t    // Set attributes from a hash on this view's element.  Exposed for\r\n\t    // subclasses using an alternative DOM manipulation API.\r\n\t    _setAttributes: function(attributes) {\r\n\t      this.$el.attr(attributes);\r\n\t    },\r\n\r\n\t    // Translation function, gets the message key to be translated\r\n\t    // and an object with context specific data as arguments:\r\n\t    i18n: function (message, context) {\r\n\t        message = (this.messages && this.messages[message]) || message.toString();\r\n\t        if (context) {\r\n\t            langx.each(context, function (key, value) {\r\n\t                message = message.replace('{' + key + '}', value);\r\n\t            });\r\n\t        }\r\n\t        return message;\r\n\t    },\r\n\r\n\t\t});\r\n\r\n\tfunction defineWidgetClass(name,base,prototype) {\r\n\r\n\t};\r\n\r\n\tlangx.mixin(widgets, {\r\n\t\t$ : query,\r\n\r\n\t\tdefine : defineWidgetClass,\r\n\t\tWidget : Widget\r\n\t});\r\n\r\n\r\n\treturn skylark.widgets = widgets;\r\n});\r\n\ndefine('skylark-utils/main',[\r\n    \"./skylark\",\r\n    \"./browser\",\r\n    \"./css\",\r\n    \"./datax\",\r\n    \"./dnd\",\r\n    \"./devices\",\r\n    \"./eventer\",\r\n    \"./filer\",\r\n    \"./finder\",\r\n    \"./fx\",\r\n    \"./geom\",\r\n    \"./images\",\r\n    \"./models\",\r\n    \"./noder\",\r\n    \"./query\",\r\n    \"./scripter\",\r\n    \"./storages\",\r\n    \"./styler\",\r\n    \"./touchx\",\r\n    \"./transforms\",\r\n    \"./langx\",\r\n    \"./elmx\",\r\n    \"./widgets\"\r\n], function(skylark) {\r\n    return skylark;\r\n})\r\n;\ndefine('skylark-utils', ['skylark-utils/main'], function (main) { return main; });\n\n"]}